/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.fidentis.gui.comparison_one_to_many;

import cz.fidentis.comparison.ICPmetric;
import cz.fidentis.comparison.RegistrationMethod;
import cz.fidentis.comparison.icp.ICPTransformation;
import cz.fidentis.comparison.icp.Icp;
import cz.fidentis.comparison.icp.KdTreeFaces;
import cz.fidentis.comparison.kdTree.KDTreeIndexed;
import cz.fidentis.comparison.kdTree.KdTree;
import cz.fidentis.comparison.procrustes.Procrustes1ToMany;
import cz.fidentis.controller.OneToManyComparison;
import cz.fidentis.featurepoints.FacialPoint;
import cz.fidentis.featurepoints.results.FpResultsOneToMany;
import cz.fidentis.gui.GUIController;
import cz.fidentis.gui.ProjectTopComponent;
import cz.fidentis.featurepoints.FpModel;
import cz.fidentis.gui.guisetup.OneToManyGUISetup;
import cz.fidentis.gui.observer.ExportFPButtonObserver;
import cz.fidentis.gui.observer.ObservableMaster;
import cz.fidentis.gui.observer.RegisterFPButtonObserver;
import cz.fidentis.gui.trainingModel.PointsToCalculateTopComponent;
import cz.fidentis.model.Model;
import cz.fidentis.model.ModelLoader;
import cz.fidentis.processing.comparison.surfaceComparison.SurfaceComparisonProcessing;
import cz.fidentis.processing.exportProcessing.FPImportExport;
import cz.fidentis.processing.featurePoints.FpProcessing;
import cz.fidentis.processing.featurePoints.LandmarkLocalization;
import cz.fidentis.processing.fileUtils.ProcessingFileUtils;
import cz.fidentis.undersampling.Methods;
import cz.fidentis.undersampling.Type;
import cz.fidentis.utils.FileUtils;
import cz.fidentis.utilsException.FileManipulationException;
import java.awt.Dimension;
import java.io.File;
import static java.io.File.separatorChar;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.vecmath.Vector3f;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.util.Exceptions;

/**
 *
 * @author Katka
 */
public class OneToManyRegistrationConfiguration extends javax.swing.JPanel {
    
    private PointsToCalculateTopComponent dialog = new PointsToCalculateTopComponent();
    
    /**
     * Creates new form RegistrationConfiguration
     */
    public OneToManyRegistrationConfiguration() {
        initComponents();
        setNamesForComboBox();
        //regMethodComboBoxActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorDialog = new javax.swing.JDialog();
        jColorChooser1 = new javax.swing.JColorChooser();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        regMethodComboBox = new javax.swing.JComboBox();
        icpPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        icpAreaComboBox = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        maxIterationSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        icpErrorSpinner = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        icpScaleCheckBox = new javax.swing.JCheckBox();
        discPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        radiusSlider = new javax.swing.JSlider();
        randomPanel = new javax.swing.JPanel();
        percentageRadioButton = new javax.swing.JRadioButton();
        numberRadioButton = new javax.swing.JRadioButton();
        percentageSpinner = new javax.swing.JSpinner();
        numberSpinner = new javax.swing.JSpinner();
        undersamplingComboBox = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        icpMetricLabel = new javax.swing.JLabel();
        icpMetricComboBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        symModelsCheckbox = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        registerButton = new javax.swing.JButton();
        fpPanel = new javax.swing.JPanel();
        fpShowInfoCheckBox = new javax.swing.JCheckBox();
        fpColorPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fpSizeSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        calculateFPButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        addFPButton = new javax.swing.JToggleButton();
        removeFPButton = new javax.swing.JToggleButton();
        editFPButton = new javax.swing.JToggleButton();
        validateFPButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jButton6 = new javax.swing.JButton();
        exportFPButton = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        fpScaleCheckBox = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        fpThresholdSlider = new javax.swing.JSlider();
        jLabel15 = new javax.swing.JLabel();
        trainingModelSelection = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        choosePointsButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        continueComparisonCheckBox = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();

        Dimension dimension = new Dimension();
        dimension.setSize(jColorChooser1.getPreferredSize().width + 5, jColorChooser1.getPreferredSize().height+80);
        colorDialog.setMinimumSize(dimension);
        colorDialog.setModal(true);
        colorDialog.setResizable(false);

        org.openide.awt.Mnemonics.setLocalizedText(jButton4, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton5, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jButton5.text")); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colorDialogLayout = new javax.swing.GroupLayout(colorDialog.getContentPane());
        colorDialog.getContentPane().setLayout(colorDialogLayout);
        colorDialogLayout.setHorizontalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addGap(6, 6, 6))
        );
        colorDialogLayout.setVerticalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorDialogLayout.createSequentialGroup()
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton4))
                .addGap(0, 69, Short.MAX_VALUE))
        );

        regMethodComboBox.setModel(new DefaultComboBoxModel(RegistrationMethod.values()));
        regMethodComboBox.setMaximumSize(new java.awt.Dimension(115, 25));
        regMethodComboBox.setMinimumSize(new java.awt.Dimension(115, 20));
        regMethodComboBox.setPreferredSize(new java.awt.Dimension(115, 20));
        regMethodComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regMethodComboBoxActionPerformed(evt);
            }
        });

        icpPanel.setVisible(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jLabel5.text")); // NOI18N

        icpAreaComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Full scan", "Automatic mask", "Area combination", "Manual selection" }));
        icpAreaComboBox.setEnabled(false);
        icpAreaComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                icpAreaComboBoxActionPerformed(evt);
            }
        });

        jPanel4.setVisible(false);

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox2, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jCheckBox2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox4, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jCheckBox4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox7, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jCheckBox7.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox3, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jCheckBox3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox6, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jCheckBox6.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox8, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jCheckBox8.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox5, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jCheckBox5.text")); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox8)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox2)
                            .addComponent(jCheckBox3)
                            .addComponent(jCheckBox5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox7)
                            .addComponent(jCheckBox6)
                            .addComponent(jCheckBox4))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox6))
                .addGap(0, 0, 0)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox5)
                    .addComponent(jCheckBox7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox8))
        );

        maxIterationSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(10), Integer.valueOf(0), null, Integer.valueOf(1)));
        maxIterationSpinner.setValue(15);
        maxIterationSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxIterationSpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jLabel6.text")); // NOI18N

        icpErrorSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.05f), Float.valueOf(0.0f), null, Float.valueOf(0.01f)));
        icpErrorSpinner.setValue(0.05f);
        icpErrorSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                icpErrorSpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jLabel7.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jLabel10.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(icpScaleCheckBox, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.icpScaleCheckBox.text")); // NOI18N
        icpScaleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                icpScaleCheckBoxActionPerformed(evt);
            }
        });

        discPanel.setVisible(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jLabel9.text")); // NOI18N

        radiusSlider.setMajorTickSpacing(25);
        radiusSlider.setMinorTickSpacing(5);
        radiusSlider.setPaintLabels(true);
        radiusSlider.setPaintTicks(true);
        radiusSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radiusSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout discPanelLayout = new javax.swing.GroupLayout(discPanel);
        discPanel.setLayout(discPanelLayout);
        discPanelLayout.setHorizontalGroup(
            discPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(discPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radiusSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        discPanelLayout.setVerticalGroup(
            discPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(discPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(discPanelLayout.createSequentialGroup()
                .addComponent(radiusSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        buttonGroup2.add(percentageRadioButton);
        percentageRadioButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(percentageRadioButton, org.openide.util.NbBundle.getMessage(GUIController.class, "registration.undersampling.percentage")); // NOI18N
        percentageRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentageRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup2.add(numberRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(numberRadioButton, org.openide.util.NbBundle.getMessage(GUIController.class, "registration.undersampling.number")); // NOI18N
        numberRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberRadioButtonActionPerformed(evt);
            }
        });

        percentageSpinner.setModel(new javax.swing.SpinnerNumberModel(50, 0, 100, 1));
        percentageSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                percentageSpinnerStateChanged(evt);
            }
        });

        numberSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        numberSpinner.setEnabled(false);
        numberSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numberSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout randomPanelLayout = new javax.swing.GroupLayout(randomPanel);
        randomPanel.setLayout(randomPanelLayout);
        randomPanelLayout.setHorizontalGroup(
            randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(randomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(randomPanelLayout.createSequentialGroup()
                        .addComponent(numberRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(numberSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(randomPanelLayout.createSequentialGroup()
                        .addComponent(percentageRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(percentageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        randomPanelLayout.setVerticalGroup(
            randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(randomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(percentageRadioButton)
                    .addComponent(percentageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberRadioButton)
                    .addComponent(numberSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        undersamplingComboBox.setModel(new DefaultComboBoxModel(Methods.values()));
        undersamplingComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undersamplingComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel14, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jLabel14.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(icpMetricLabel, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.icpMetricLabel.text")); // NOI18N

        icpMetricComboBox.setModel(new DefaultComboBoxModel(ICPmetric.values()));
        icpMetricComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                icpMetricComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel11, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jLabel11.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(symModelsCheckbox, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.symModelsCheckbox.text")); // NOI18N
        symModelsCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                symModelsCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout icpPanelLayout = new javax.swing.GroupLayout(icpPanel);
        icpPanel.setLayout(icpPanelLayout);
        icpPanelLayout.setHorizontalGroup(
            icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(icpPanelLayout.createSequentialGroup()
                .addComponent(jLabel5)
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(icpPanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, icpPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(icpAreaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(icpPanelLayout.createSequentialGroup()
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(randomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(icpPanelLayout.createSequentialGroup()
                        .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel10)
                            .addComponent(jLabel14)
                            .addComponent(jLabel11)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(icpPanelLayout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(icpScaleCheckBox)
                                    .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(maxIterationSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(icpErrorSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(symModelsCheckbox)))
                            .addComponent(undersamplingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(discPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(icpPanelLayout.createSequentialGroup()
                        .addComponent(icpMetricLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(icpMetricComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        icpPanelLayout.setVerticalGroup(
            icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(icpPanelLayout.createSequentialGroup()
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(icpAreaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(icpMetricLabel)
                    .addComponent(icpMetricComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(icpScaleCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11)
                    .addComponent(symModelsCheckbox))
                .addGap(9, 9, 9)
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(icpErrorSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(maxIterationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(undersamplingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(randomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(discPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jLabel12.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(registerButton, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.registerButton.text")); // NOI18N
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        fpShowInfoCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(fpShowInfoCheckBox, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.fpShowInfoCheckBox.text")); // NOI18N
        fpShowInfoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fpShowInfoCheckBoxActionPerformed(evt);
            }
        });

        fpColorPanel.setBackground(new java.awt.Color(255, 19, 27));
        fpColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fpColorPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        fpColorPanel.setEnabled(false);
        fpColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fpColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout fpColorPanelLayout = new javax.swing.GroupLayout(fpColorPanel);
        fpColorPanel.setLayout(fpColorPanelLayout);
        fpColorPanelLayout.setHorizontalGroup(
            fpColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        fpColorPanelLayout.setVerticalGroup(
            fpColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jLabel4.text")); // NOI18N

        fpSizeSlider.setMaximum(50);
        fpSizeSlider.setMinimum(10);
        fpSizeSlider.setToolTipText(org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.fpSizeSlider.toolTipText")); // NOI18N
        fpSizeSlider.setValue(20);
        fpSizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fpSizeSliderStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jLabel1.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jTextField1.text")); // NOI18N
        jTextField1.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jButton2.text")); // NOI18N
        jButton2.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(calculateFPButton, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.calculateFPButton.text")); // NOI18N
        calculateFPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateFPButtonActionPerformed(evt);
            }
        });

        jPanel2.setLayout(new java.awt.GridLayout(2, 0));

        org.openide.awt.Mnemonics.setLocalizedText(addFPButton, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.addFPButton.text")); // NOI18N
        addFPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFPButtonActionPerformed(evt);
            }
        });
        jPanel2.add(addFPButton);

        org.openide.awt.Mnemonics.setLocalizedText(removeFPButton, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.removeFPButton.text")); // NOI18N
        removeFPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFPButtonActionPerformed(evt);
            }
        });
        jPanel2.add(removeFPButton);

        org.openide.awt.Mnemonics.setLocalizedText(editFPButton, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.editFPButton.text")); // NOI18N
        editFPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editFPButtonActionPerformed(evt);
            }
        });
        jPanel2.add(editFPButton);

        org.openide.awt.Mnemonics.setLocalizedText(validateFPButton, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.validateFPButton.text")); // NOI18N
        validateFPButton.setToolTipText(org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.validateFPButton.toolTipText")); // NOI18N
        validateFPButton.setEnabled(false);
        validateFPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateFPButtonActionPerformed(evt);
            }
        });
        jPanel2.add(validateFPButton);

        org.openide.awt.Mnemonics.setLocalizedText(jButton6, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jButton6.text")); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(exportFPButton, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.exportFPButton.text")); // NOI18N
        exportFPButton.setEnabled(false);
        exportFPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportFPButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton8, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jButton8.text")); // NOI18N
        jButton8.setEnabled(false);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jLabel8.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(fpScaleCheckBox, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.fpScaleCheckBox.text")); // NOI18N
        fpScaleCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fpScaleCheckBoxStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jLabel13.text")); // NOI18N

        fpThresholdSlider.setMajorTickSpacing(20);
        fpThresholdSlider.setMinorTickSpacing(5);
        fpThresholdSlider.setPaintLabels(true);
        fpThresholdSlider.setPaintTicks(true);
        fpThresholdSlider.setValue(30);
        fpThresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fpThresholdSliderStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel15, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jLabel15.text")); // NOI18N

        trainingModelSelection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                trainingModelSelectionItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel16, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jLabel16.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(choosePointsButton, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.choosePointsButton.text")); // NOI18N
        choosePointsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choosePointsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fpPanelLayout = new javax.swing.GroupLayout(fpPanel);
        fpPanel.setLayout(fpPanelLayout);
        fpPanelLayout.setHorizontalGroup(
            fpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fpPanelLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(fpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fpSizeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fpColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(calculateFPButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(fpPanelLayout.createSequentialGroup()
                .addGroup(fpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(fpShowInfoCheckBox))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(exportFPButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(fpPanelLayout.createSequentialGroup()
                .addGroup(fpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fpScaleCheckBox)
                    .addComponent(fpThresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
            .addGroup(fpPanelLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(fpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fpPanelLayout.createSequentialGroup()
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(choosePointsButton)
                        .addContainerGap())
                    .addGroup(fpPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(fpPanelLayout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trainingModelSelection, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        fpPanelLayout.setVerticalGroup(
            fpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fpPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(fpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(trainingModelSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(choosePointsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calculateFPButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportFPButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fpScaleCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fpThresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fpShowInfoCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(fpColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(fpSizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        Hashtable tresholdTable = new Hashtable();
        tresholdTable.put(new Integer(0), new JLabel("0"));
        tresholdTable.put(new Integer(20), new JLabel("0,2"));
        tresholdTable.put(new Integer(40), new JLabel("0,4"));
        tresholdTable.put(new Integer(60), new JLabel("0,6"));
        tresholdTable.put(new Integer(80), new JLabel("0,8"));
        tresholdTable.put(new Integer(100), new JLabel("1"));
        fpThresholdSlider.setLabelTable(tresholdTable);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(continueComparisonCheckBox, org.openide.util.NbBundle.getMessage(OneToManyRegistrationConfiguration.class, "OneToManyRegistrationConfiguration.continueComparisonCheckBox.text")); // NOI18N
        continueComparisonCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueComparisonCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(continueComparisonCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(registerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(icpPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(regMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(fpPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(26, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(regMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(icpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(continueComparisonCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(registerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private Boolean areFPCalculated(ProjectTopComponent comp) {
        int n = comp.getProject().getSelectedOneToManyComparison().getModels().size();
        if (n == 0) {
            return false;
        }
        for (int i = 0; i < n; i++) {
            List<FacialPoint> facialPoints = comp.getProject().getSelectedOneToManyComparison().getFacialPoints(
                    comp.getProject().getSelectedOneToManyComparison().getModel(i).getName());
            if (facialPoints == null || facialPoints.isEmpty()) {
                return false;
            }
        }
        List<FacialPoint> facialPoints = comp.getOneToManyViewerPanel().getListener1().getFacialPoints();

        return !facialPoints.isEmpty();
    }

    private Boolean areModelsLoaded(ProjectTopComponent tc) {
        if ((tc.getProject().getSelectedOneToManyComparison().getModels().size() > 0) && (null != tc.getProject().getSelectedOneToManyComparison().getPrimaryModel())) {
            return true;
        }
        return false;
    }

    private void regMethodComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regMethodComboBoxActionPerformed
        if (regMethodComboBox.getSelectedItem() == RegistrationMethod.PROCRUSTES) {
            fpPanel.setVisible(true);
            icpPanel.setVisible(false);
            registerButton.setEnabled(areFPCalculated(GUIController.getSelectedProjectTopComponent()));
            exportFPButton.setEnabled(areFPCalculated(GUIController.getSelectedProjectTopComponent()));
        } else if (regMethodComboBox.getSelectedItem() == RegistrationMethod.HAUSDORFF) {
            fpPanel.setVisible(false);
            icpPanel.setVisible(true);
            registerButton.setEnabled(areModelsLoaded(GUIController.getSelectedProjectTopComponent()));
        } else {
            fpPanel.setVisible(false);
            icpPanel.setVisible(false);
            registerButton.setEnabled(areModelsLoaded(GUIController.getSelectedProjectTopComponent()));
        }
        getContext().setRegistrationMethod((RegistrationMethod) regMethodComboBox.getSelectedItem());

    }//GEN-LAST:event_regMethodComboBoxActionPerformed

    private void fpShowInfoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpShowInfoCheckBoxActionPerformed
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().showInfo(fpShowInfoCheckBox.isSelected());
        getContext().setShowPointInfo(fpShowInfoCheckBox.isSelected());
    }//GEN-LAST:event_fpShowInfoCheckBoxActionPerformed

    private void fpColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fpColorPanelMouseClicked
        jColorChooser1.setColor(fpColorPanel.getBackground());
        colorDialog.setVisible(true);
        setColor();
    }//GEN-LAST:event_fpColorPanelMouseClicked

    private void fpSizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fpSizeSliderStateChanged
        setFacialPointRadius();
    }//GEN-LAST:event_fpSizeSliderStateChanged


    private void calculateFPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateFPButtonActionPerformed
        if (areModelsLoaded(GUIController.getSelectedProjectTopComponent())) {
            final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
            final OneToManyComparison c = getContext();
            
            //calculatePoints();
            Runnable run = new Runnable() {

                @Override
                public void run() {
                    
                    FpResultsOneToMany res = FpProcessing.instance().calculatePointsOneToMany(c.getModels(), 
                    tc.getOneToManyViewerPanel().getListener1().getModel(), dialog.getPointsArray());
                    
                    HashMap<String, List<FacialPoint>> resCopy = new HashMap<>();
                    List<FacialPoint> fpCopy;
                    
                    for(String key : res.getFacialPoints().keySet()){
                        fpCopy = new ArrayList<>();
                        for(FacialPoint fp : res.getFacialPoints().get(key)){
                            fpCopy.add(fp.deepCopyFp());
                        }
                        
                        resCopy.put(key, fpCopy);
                    }
                    
                    fpCopy = new ArrayList<>();
                    
                    for(FacialPoint fp : res.getMainFfps()){
                        fpCopy.add(fp.deepCopyFp());
                    }
                    
                    resCopy.put(tc.getOneToManyViewerPanel().getListener1().getModel().getName(), fpCopy);
                    
                    c.setOriginalFp(resCopy);
            
                    c.setFacialPoints(res.getFacialPoints());
                    c.addFacialPoints(tc.getOneToManyViewerPanel().getListener1().getModel().getName(), res.getMainFfps());
                    tc.getOneToManyViewerPanel().getListener1().initFpUniverse(res.getMainFfps());
                    
                    tc.getOneToManyViewerPanel().getListener2().setFacialPoints(
                        c.getFacialPoints(
                                tc.getOneToManyViewerPanel().getListener2().getModel().getName()
                        ));
            
            
                    //move to GUI manipulation eventually
                    registerButton.setEnabled(areFPCalculated(tc));
                    exportFPButton.setEnabled(areFPCalculated(tc));
                    }
                };
           
            Thread t = new Thread(run);
            t.start();
        }
    }//GEN-LAST:event_calculateFPButtonActionPerformed

    private void removeFPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFPButtonActionPerformed
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().setRemovePoints(removeFPButton.isSelected());
        addFPButton.setSelected(false);
        editFPButton.setSelected(false);
    }//GEN-LAST:event_removeFPButtonActionPerformed

    private void addFPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFPButtonActionPerformed
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().setAddPoints(addFPButton.isSelected());
        
        editFPButton.setSelected(false);
        removeFPButton.setSelected(false);
    }//GEN-LAST:event_addFPButtonActionPerformed

    private void editFPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editFPButtonActionPerformed

    GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().setEditablePoints(editFPButton.isSelected());

      removeFPButton.setSelected(false);
      addFPButton.setSelected(false);
    }//GEN-LAST:event_editFPButtonActionPerformed

    private void icpAreaComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_icpAreaComboBoxActionPerformed
        if (icpAreaComboBox.getSelectedIndex() == 2) {
            jPanel4.setVisible(true);
        } else {
            jPanel4.setVisible(false);
        }
    }//GEN-LAST:event_icpAreaComboBoxActionPerformed

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        final OneToManyComparison c = getContext();
        registerButton.setEnabled(false);
        Runnable run = new Runnable() {

            @Override
            public void run() {

                if (c.getRegistrationMethod() == RegistrationMethod.HAUSDORFF) {
                    ProgressHandle p;
                    p = ProgressHandleFactory.createHandle("Registrating faces...");
                    p.start();

                    try {

                        Icp.instance().setP(null);
                        SurfaceComparisonProcessing.setP(p);

                        try {
                            FileUtils.instance().createTMPmoduleFolder(new File("compF"));
                        } catch (FileManipulationException ex) {
                            //osefuj error
                            Exceptions.printStackTrace(ex);
                            registerButton.setEnabled(true);
                        }

                        List<File> models = c.getModels();
                                          
                        List<File> results;
                        Model template = tc.getOneToManyViewerPanel().getListener1().getModel();
                       
                        
                        if(c.isUseSymmetry()){
                            models = SurfaceComparisonProcessing.instance().createSymModelAndSave(models);
                            SurfaceComparisonProcessing.instance().createSymetricModelNoCopy(template);
                        }
                        

                        ICPmetric metric = c.getIcpMetric();
                        Methods m = Methods.values()[c.getMethod()];
                        Type t = SurfaceComparisonProcessing.instance().getSelectedType(m, buttonGroup2);
                        float value = getUndersampleValue(m, t);
                        KdTree mainF;

                        if (metric == ICPmetric.VERTEX_TO_VERTEX) {
                            mainF = new KDTreeIndexed(template.getVerts());
                        } else {
                            mainF = new KdTreeFaces(template.getVerts(), template.getFaces());
                        }

                        results = SurfaceComparisonProcessing.instance().processOneToMany(mainF, models, c.getICPmaxIteration(), c.getScaleEnabled(), c.getICPerrorRate(),
                                m, t, value, c);
                        c.setRegisteredModels(results);
                        
                        p.finish();
                    } catch (Exception ex) {
                        registerButton.setEnabled(true);
                        Exceptions.printStackTrace(ex);
                    }finally{
                        p.finish();
                    }

                } else if (c.getRegistrationMethod() == RegistrationMethod.PROCRUSTES) {
                    //zarovnanie feature points
                    try {
                        List<List<FacialPoint>> list = new ArrayList();
                        List<ArrayList<Vector3f>> verts = new ArrayList();
                        
                        int size = c.getModels().size();
                        for (int i = 0; i < size; i++) {
                            List<FacialPoint> facialPoints = c.getFacialPoints(
                                    c.getModels().get(i).getName());
                            list.add(facialPoints);

                            Model m = ModelLoader.instance().loadModel(c.getModel(i), Boolean.FALSE, Boolean.TRUE);
                            verts.add(m.getVerts());
                        }

                        Model mainFace = tc.getOneToManyViewerPanel().getListener1().getModel();
                        Procrustes1ToMany procrustes = new Procrustes1ToMany(c.getFacialPoints(mainFace.getName()), mainFace.getVerts(),
                                list, verts, c.isFpScaling());

                        List<List<ICPTransformation>> trans = procrustes.align1withN();
                        for (List<ICPTransformation> t : trans) {
                            if (t == null) {
                                int res = JOptionPane.showConfirmDialog(tc, "There wasn't enough corresponding landmarks in one or more of the models to register models. Do you wish to continue?", "Not enough landmarks", JOptionPane.YES_NO_OPTION);
                                if (res == JOptionPane.NO_OPTION) {
                                    registerButton.setEnabled(true);
                                    return;
                                } else if (res == JOptionPane.YES_OPTION) {
                                    noRegistration(); //if user wish to continue don't ask them to continue again
                                    finalizeRegistration();
                                    return;
                                }
                            }
                        }
                        c.setTrans(trans);

                        c.getPrimaryModel().setVerts(procrustes.getPa().getVertices());
                        //procrustes.getPa().updateFacialPoints(tc.getOneToManyViewerPanel().getListener1().getFpUniverse().getFacialPoints()); WHAT DOES THIS DO?

                        List<FacialPoint> mainFp = c.getFacialPoints(mainFace.getName());
                        
                        //clear all current Feature Points in listener
                        c.clearFacialPoints();
                        c.addFacialPoints(c.getPrimaryModel().getName(), mainFp);
                        List<File> r = new LinkedList<>();      //registered models saved to disk
                        File tmpModuleFile = new File("" + System.currentTimeMillis());

                        FileUtils.instance().createTMPmoduleFolder(tmpModuleFile);

                        for (int i = 0; i < size; i++) {
                            List<FacialPoint> values = new ArrayList<>();
                            values.addAll(procrustes.getPa2().get(i).getConfig().values());
                            c.addFacialPoints(c.getModel(i).getName(), values);

                            Model m = ModelLoader.instance().loadModel(c.getModel(i), false, Boolean.TRUE);
                            m.setVerts(procrustes.getPa2(i).getVertices());
                            procrustes.getPa2(i).updateFacialPoints(c.getFacialPoints(m.getName()));

                            if (tc.getOneToManyViewerPanel().getListener2().getModel().getName().equals(m.getName())) {
                                tc.getOneToManyViewerPanel().getListener2().setModels(m);
                            }
                            ProgressHandle k = ProgressHandleFactory.createHandle("saving registered files.");

                            k.start();

                            r.add(ProcessingFileUtils.instance().saveModelToTMP(m, tmpModuleFile, i, -3, Boolean.TRUE));
                            k.finish();
                        }

                        c.setRegisteredModels(r);

                        tc.getOneToManyViewerPanel().getListener2().setFacialPoints(
                                tc.getProject().getSelectedOneToManyComparison().getFacialPoints(
                                        tc.getOneToManyViewerPanel().getListener2().getModel().getName()
                                ));

                    } catch (Exception ex) {
                        Exceptions.printStackTrace(ex);
                        registerButton.setEnabled(true);
                    }

                }else{
                    noRegistration();
                }
                
                finalizeRegistration();
            }

            private void noRegistration() {
                //no registration, consider original models as registered
                c.setRegisteredModels(c.getModels());
            }

            private void finalizeRegistration() {
                //set up default values for comparison configuration
                OneToManyGUISetup.defaultValuesComparisonConfiguration(c);

                c.setState(2);
                if (GUIController.getSelectedProjectTopComponent() == tc) {
                    GUIController.getConfigurationTopComponent().addOneToManyComparisonComponent();
                }
                registerButton.setEnabled(true);
                if (c.isContinueComparison()) {
                    GUIController.getConfigurationTopComponent().getOneToManyComparisonConfiguration().computeComparison(tc);
                }
                GUIController.updateNavigator();
            }

        };

        Thread t = new Thread(run);
        t.start();


    }//GEN-LAST:event_registerButtonActionPerformed

    private int getUndersampleValue(Methods m, Type t){
        if (m == Methods.Curvature || m == Methods.Random) {
            switch (t) {
                case PERCENTAGE:
                    return (int) percentageSpinner.getValue();
                case NUMBER:
                    return (int) numberSpinner.getValue();
                default:
                    return -1;
            }
        }else if(m == Methods.Disc){
            return radiusSlider.getValue();
        }
        
        return -1;
    }
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        OneToManyComparison c = getContext();
        List<FpModel> loaded = FPImportExport.instance().importPoints(tc, true);
        
        if(loaded == null || loaded.isEmpty()){
            //nothing loaded
            return;
        }
        
        tc.getProject().getSelectedOneToManyComparison().clearFacialPoints();
        
        
        List<File> models = new ArrayList<>();
        
        models.addAll(c.getModels());
        if(c.getPrimaryModel() != null){
            models.add(c.getPrimaryModel().getFile());
        }
        
        FPImportExport.instance().alignPointsToModels(loaded, models);
        
        for(FpModel model : loaded){
            if(c.getPrimaryModel() != null &&
                    model.getModelName().equals(c.getPrimaryModel().getName())){
                tc.getOneToManyViewerPanel().getListener1().setFacialPoints(model.getFacialPoints());
                tc.getOneToManyViewerPanel().getListener1().initFpUniverse(model.getFacialPoints());
                
            }
            
            if(tc.getOneToManyViewerPanel().getListener2().getModel() != null &&
                    tc.getOneToManyViewerPanel().getListener2().getModel().getName().equals(model.getModelName())){
                tc.getOneToManyViewerPanel().getListener2().setFacialPoints(model.getFacialPoints());
            }
            
            c.addFacialPoints(model.getModelName(), model.getFacialPoints());
            c.addOriginalFp(model.getModelName(), model.createListFp());
        }
        
        
        registerButton.setEnabled(areFPCalculated(tc));
        exportFPButton.setEnabled(areFPCalculated(tc));
             
        

    }//GEN-LAST:event_jButton6ActionPerformed

    public Boolean validate(ImportPanel p) {
        String path = p.getFileName();
        if (!new File(path).exists()) {
            return false;
        }
        return true;
    }

    public Boolean validate(ExportPanel p) {
        String path = p.getFolderName();
        if (p.getSelectedModelName().equals("All models") && new File(path).exists() && p.getSelectedModel() == 2) {
            return true;
        } else if (!new File(path).exists() || p.getFileName().isEmpty()) {
            return false;
        }
        return true;
    }


    private void exportFPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportFPButtonActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        FPImportExport.instance().exportOneToMany(tc,
                getContext(),
                tc.getOneToManyViewerPanel().getListener1().getFacialPoints(), tc.getOneToManyViewerPanel().getListener1().getModel());

    }//GEN-LAST:event_exportFPButtonActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void validateFPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateFPButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_validateFPButtonActionPerformed

    private void icpErrorSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_icpErrorSpinnerStateChanged
        getContext().setICPerrorRate((float) icpErrorSpinner.getValue());
    }//GEN-LAST:event_icpErrorSpinnerStateChanged

    private void maxIterationSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxIterationSpinnerStateChanged
        getContext().setICPmaxIteration((int) maxIterationSpinner.getValue());
    }//GEN-LAST:event_maxIterationSpinnerStateChanged

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        colorDialog.setVisible(false);
        fpColorPanel.setBackground(jColorChooser1.getColor());
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        colorDialog.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void icpScaleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_icpScaleCheckBoxActionPerformed
        getContext().setScaleEnabled(icpScaleCheckBox.isSelected());
    }//GEN-LAST:event_icpScaleCheckBoxActionPerformed

    private void fpScaleCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fpScaleCheckBoxStateChanged
        getContext().setFpScaling(fpScaleCheckBox.isSelected());
    }//GEN-LAST:event_fpScaleCheckBoxStateChanged

    private void fpThresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fpThresholdSliderStateChanged
        getContext().setFpTreshold(fpThresholdSlider.getValue());
    }//GEN-LAST:event_fpThresholdSliderStateChanged

    private void percentageRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentageRadioButtonActionPerformed
        percentageSpinner.setEnabled(true);
        numberSpinner.setEnabled(false);
        
        getContext().setType(Type.PERCENTAGE.ordinal());
    }//GEN-LAST:event_percentageRadioButtonActionPerformed

    private void numberRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberRadioButtonActionPerformed
        percentageSpinner.setEnabled(false);
        numberSpinner.setEnabled(true);
        
       getContext().setType(Type.NUMBER.ordinal());
    }//GEN-LAST:event_numberRadioButtonActionPerformed

    private void percentageSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_percentageSpinnerStateChanged
       getContext().setValue(Float.parseFloat(percentageSpinner.getValue().toString()));
    }//GEN-LAST:event_percentageSpinnerStateChanged

    private void numberSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numberSpinnerStateChanged
        if(numberSpinner.getValue() != null)
            getContext().setValue(Float.parseFloat(numberSpinner.getValue().toString()));
    }//GEN-LAST:event_numberSpinnerStateChanged

    private void undersamplingComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undersamplingComboBoxActionPerformed
        switch((Methods)undersamplingComboBox.getSelectedItem()){
            case Random: //Random
            randomPanel.setVisible(true);
            discPanel.setVisible(false);
            break;
            case Disc:
            randomPanel.setVisible(false);
            discPanel.setVisible(true);
            break;
            case None:
            randomPanel.setVisible(false);
            discPanel.setVisible(false);
            break;
        }
        
        getContext().setMethod(((Methods)undersamplingComboBox.getSelectedItem()).ordinal());
    }//GEN-LAST:event_undersamplingComboBoxActionPerformed

    private void icpMetricComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_icpMetricComboBoxActionPerformed
        getContext().setIcpMetric((ICPmetric) icpMetricComboBox.getSelectedItem());
    }//GEN-LAST:event_icpMetricComboBoxActionPerformed

    private void symModelsCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_symModelsCheckboxActionPerformed
        getContext().setUseSymmetry(symModelsCheckbox.isSelected());
    }//GEN-LAST:event_symModelsCheckboxActionPerformed

    private void continueComparisonCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueComparisonCheckBoxActionPerformed
       getContext().setContinueComparison(continueComparisonCheckBox.isSelected());
    }//GEN-LAST:event_continueComparisonCheckBoxActionPerformed

    private void radiusSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radiusSliderStateChanged
        getContext().setValue(radiusSlider.getValue());
    }//GEN-LAST:event_radiusSliderStateChanged

    private void trainingModelSelectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_trainingModelSelectionItemStateChanged
        try {
            LandmarkLocalization.setTrainingModel(trainingModelSelection.getSelectedItem().toString());
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_trainingModelSelectionItemStateChanged

    private void choosePointsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choosePointsButtonActionPerformed
        JFrame frame = new JFrame();
        frame.add(dialog);
        frame.setSize(dialog.getPreferredSize());
        frame.setVisible(true);
    }//GEN-LAST:event_choosePointsButtonActionPerformed
    private void setColor() {

        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener1().setColorOfPoint(fpColorPanel.getBackground().getRGBColorComponents(new float[3]));
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener2().setColorOfPoint(fpColorPanel.getBackground().getRGBColorComponents(new float[3]));
        getContext().setPointColor(fpColorPanel.getBackground());
    }

    private void setFacialPointRadius() {
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener1().setFacialPointRadius(fpSizeSlider.getValue() / 10.0f);
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener2().setFacialPointRadius(fpSizeSlider.getValue() / 10.0f);
        getContext().setFpSize(fpSizeSlider.getValue());
    }

    public void setConfiguration() {
        OneToManyComparison c = getContext();
          
        //set up data when first created
        if(c.isFirstCreated()){
            //to check whether FPs can be exported once they are added, removed
            ObservableMaster o = new ObservableMaster();
            ExportFPButtonObserver export = new ExportFPButtonObserver(exportFPButton,
                    c.getFacialPoints());
            RegisterFPButtonObserver register = new RegisterFPButtonObserver(registerButton, c.getFacialPoints());

            o.addObserver(export);
            o.addObserver(register);

            GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().setFpExportEnable(o);
            OneToManyGUISetup.setUpDefaultRegistrationData(c);      //this method will set up firstCreated to false
        }
       
       regMethodComboBox.setSelectedItem(c.getRegistrationMethod());
       
       //FP
       fpScaleCheckBox.setSelected(c.isFpScaling());
       fpThresholdSlider.setValue(c.getFpTreshold());
       fpShowInfoCheckBox.setSelected(c.isShowPointInfo());
       fpColorPanel.setBackground(c.getPointColor());
       fpSizeSlider.setValue(c.getFpSize());
       
       //ICP
       icpMetricComboBox.setSelectedItem(c.getIcpMetric());
       icpScaleCheckBox.setSelected(c.getScaleEnabled());
       symModelsCheckbox.setSelected(c.isUseSymmetry());
       icpErrorSpinner.setValue(c.getICPerrorRate());
       maxIterationSpinner.setValue(c.getICPmaxIteration());
       undersamplingComboBox.setSelectedIndex(c.getMethod());
       percentageSpinner.setValue(c.getValue());
       numberSpinner.setValue(c.getValue());
       radiusSlider.setValue((int) c.getValue());
       
       if(c.getMethod() == Methods.Curvature.ordinal() ||
           c.getMethod() == Methods.Random.ordinal()){
           if(c.getType() == Type.NUMBER.ordinal()){
               percentageSpinner.setValue(50);
               percentageSpinner.setEnabled(false);
               numberRadioButton.setSelected(true);
               numberSpinner.setEnabled(true);
           }else{
               numberSpinner.setValue(0);
               percentageRadioButton.setSelected(true);
               percentageSpinner.setEnabled(true);
               numberSpinner.setEnabled(false);
           }
       }else if(c.getMethod() == Methods.Disc.ordinal()){
           percentageSpinner.setValue(50);
           numberSpinner.setValue(0);
           numberSpinner.setEnabled(false);
       }else{
           percentageSpinner.setValue(50);
           numberSpinner.setValue(50);
           radiusSlider.setValue(50);
       }
       
       GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getFpExportEnable().updateObservers();
       continueComparisonCheckBox.setSelected(c.isContinueComparison());
        
        if ((c.getRegistrationMethod().ordinal() == 0 && !areFPCalculated(GUIController.getSelectedProjectTopComponent())) || (!areModelsLoaded(GUIController.getSelectedProjectTopComponent()))) {
            registerButton.setEnabled(false);
            exportFPButton.setEnabled(false);
        } else {
            registerButton.setEnabled(true);
            exportFPButton.setEnabled(true);
        }
     }
    
    private OneToManyComparison getContext(){
        return GUIController.getSelectedProjectTopComponent().getProject().getSelectedOneToManyComparison();
    }
    
 
    public void updateRegisterButtonEnabled() {
        if ((getContext().getRegistrationMethod().ordinal() == 0 && !areFPCalculated(GUIController.getSelectedProjectTopComponent())) || (!areModelsLoaded(GUIController.getSelectedProjectTopComponent()))) {
            registerButton.setEnabled(false);
            exportFPButton.setEnabled(false);
        } else {
            registerButton.setEnabled(true);
            exportFPButton.setEnabled(true);
        }
    }
    
    private void setNamesForComboBox(){
        try {
            File folder = new File((new java.io.File(".").getCanonicalPath() + separatorChar + "models" + separatorChar + "resources" + separatorChar + "trainingModels"));
            File[] listOfFiles = folder.listFiles();
            String[] namesOfFiles = new String[listOfFiles.length];
            
            for (int i = 0; i < listOfFiles.length; i++) {
                
                namesOfFiles[i] = listOfFiles[i].getName();
            
            }
            
            trainingModelSelection.setModel(new javax.swing.DefaultComboBoxModel(namesOfFiles));
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton addFPButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton calculateFPButton;
    private javax.swing.JButton choosePointsButton;
    private javax.swing.JDialog colorDialog;
    private javax.swing.JCheckBox continueComparisonCheckBox;
    private javax.swing.JPanel discPanel;
    private javax.swing.JToggleButton editFPButton;
    private javax.swing.JButton exportFPButton;
    private javax.swing.JPanel fpColorPanel;
    private javax.swing.JPanel fpPanel;
    private javax.swing.JCheckBox fpScaleCheckBox;
    private javax.swing.JCheckBox fpShowInfoCheckBox;
    private javax.swing.JSlider fpSizeSlider;
    private javax.swing.JSlider fpThresholdSlider;
    private javax.swing.JComboBox icpAreaComboBox;
    private javax.swing.JSpinner icpErrorSpinner;
    private javax.swing.JComboBox<cz.fidentis.comparison.ICPmetric> icpMetricComboBox;
    private javax.swing.JLabel icpMetricLabel;
    private javax.swing.JPanel icpPanel;
    private javax.swing.JCheckBox icpScaleCheckBox;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JSpinner maxIterationSpinner;
    private javax.swing.JRadioButton numberRadioButton;
    private javax.swing.JSpinner numberSpinner;
    private javax.swing.JRadioButton percentageRadioButton;
    private javax.swing.JSpinner percentageSpinner;
    private javax.swing.JSlider radiusSlider;
    private javax.swing.JPanel randomPanel;
    private javax.swing.JComboBox regMethodComboBox;
    private javax.swing.JButton registerButton;
    private javax.swing.JToggleButton removeFPButton;
    private javax.swing.JCheckBox symModelsCheckbox;
    private javax.swing.JComboBox<String> trainingModelSelection;
    private javax.swing.JComboBox<cz.fidentis.undersampling.Methods> undersamplingComboBox;
    private javax.swing.JButton validateFPButton;
    // End of variables declaration//GEN-END:variables
}
