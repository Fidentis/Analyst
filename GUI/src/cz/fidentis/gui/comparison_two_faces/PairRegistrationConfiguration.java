/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.fidentis.gui.comparison_two_faces;

import cz.fidentis.comparison.ICPmetric;
import cz.fidentis.comparison.RegistrationMethod;
import cz.fidentis.comparison.icp.ICPTransformation;
import cz.fidentis.comparison.icp.Icp;
import cz.fidentis.comparison.icp.KdTreeFaces;
import cz.fidentis.comparison.kdTree.KDTreeIndexed;
import cz.fidentis.comparison.kdTree.KdTree;
import cz.fidentis.comparison.procrustes.Procrustes2Models;
import cz.fidentis.controller.Comparison2Faces;
import cz.fidentis.featurepoints.FacialPoint;
import cz.fidentis.featurepoints.results.FpResultsPair;
import cz.fidentis.gui.GUIController;
import cz.fidentis.gui.ProjectTopComponent;
import cz.fidentis.featurepoints.FpModel;
import cz.fidentis.gui.guisetup.TwoFacesGUISetup;
import cz.fidentis.gui.observer.ExportFPButtonObserver;
import cz.fidentis.gui.observer.ObservableMaster;
import cz.fidentis.gui.observer.RegisterFPButtonObserver;
import cz.fidentis.gui.trainingModel.PointsToCalculateTopComponent;
import cz.fidentis.model.Model;
import cz.fidentis.model.ModelLoader;
import cz.fidentis.processing.comparison.surfaceComparison.SurfaceComparisonProcessing;
import cz.fidentis.processing.exportProcessing.FPImportExport;
import cz.fidentis.processing.featurePoints.FpProcessing;
import cz.fidentis.processing.featurePoints.LandmarkLocalization;
import cz.fidentis.undersampling.Methods;
import cz.fidentis.undersampling.Type;
import java.awt.Dimension;
import java.io.File;
import static java.io.File.separatorChar;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.util.Cancellable;
import org.openide.util.Exceptions;

/**
 *
 * @author Katka
 */
public class PairRegistrationConfiguration extends javax.swing.JPanel {

    private Thread currentTask;
    private final Cancellable cancelTask = new Cancellable() {
        @Override
        public boolean cancel() {
            currentTask.interrupt();
            return true;
        }
    };
    
    private PointsToCalculateTopComponent dialog = new PointsToCalculateTopComponent();

    /**
     * Creates new form RegistrationConfiguration
     */
    public PairRegistrationConfiguration() {
        initComponents();
        undersamplingComboboxActionPerformed(null);
        setNamesForComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorDialog = new javax.swing.JDialog();
        jColorChooser1 = new javax.swing.JColorChooser();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        methodCombobox = new javax.swing.JComboBox();
        icpPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        areaCombobox = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        forheadCheckbox = new javax.swing.JCheckBox();
        eyebrowsCheckbox = new javax.swing.JCheckBox();
        chinCheckbox = new javax.swing.JCheckBox();
        eyesCheckbox = new javax.swing.JCheckBox();
        noseCheckbox = new javax.swing.JCheckBox();
        earsCheckbox = new javax.swing.JCheckBox();
        mouthCheckbox = new javax.swing.JCheckBox();
        maxIterSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        errorSpinner = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        icpScaleCheckbox = new javax.swing.JCheckBox();
        discPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        undersamplingRadiusSlider = new javax.swing.JSlider();
        undersamplingCombobox = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        randomPanel = new javax.swing.JPanel();
        percentageJRadio = new javax.swing.JRadioButton();
        numberJRadio = new javax.swing.JRadioButton();
        percentageSpinner = new javax.swing.JSpinner();
        numberSpinner = new javax.swing.JSpinner();
        icpMetricLabel = new javax.swing.JLabel();
        icpMetricComboBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        symModCheckbox = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        registerButton = new javax.swing.JButton();
        procrustesPanel = new javax.swing.JPanel();
        showFpInfoCheckbox = new javax.swing.JCheckBox();
        fpColorPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fpSizeSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        calculatePointsButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        addPointButton = new javax.swing.JToggleButton();
        removePointButton = new javax.swing.JToggleButton();
        editPointButton = new javax.swing.JToggleButton();
        validateButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        loadPointsButton = new javax.swing.JButton();
        exportPointsButton = new javax.swing.JButton();
        saveStencilButton = new javax.swing.JButton();
        fpThresholdSlider = new javax.swing.JSlider();
        jLabel13 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        fpScaleCheckBox = new javax.swing.JCheckBox();
        trainingModelSelection = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        choosePointsButton = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        continueComparisonCheckbox = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();

        Dimension dimension = new Dimension();
        dimension.setSize(jColorChooser1.getPreferredSize().width + 5, jColorChooser1.getPreferredSize().height+80);
        colorDialog.setMinimumSize(dimension);
        colorDialog.setModal(true);
        colorDialog.setResizable(false);

        org.openide.awt.Mnemonics.setLocalizedText(jButton4, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton5, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jButton5.text")); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colorDialogLayout = new javax.swing.GroupLayout(colorDialog.getContentPane());
        colorDialog.getContentPane().setLayout(colorDialogLayout);
        colorDialogLayout.setHorizontalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addGap(6, 6, 6))
        );
        colorDialogLayout.setVerticalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorDialogLayout.createSequentialGroup()
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton4))
                .addGap(0, 69, Short.MAX_VALUE))
        );

        methodCombobox.setModel(new DefaultComboBoxModel<>(RegistrationMethod.values()));
        methodCombobox.setMaximumSize(new java.awt.Dimension(115, 25));
        methodCombobox.setMinimumSize(new java.awt.Dimension(115, 20));
        methodCombobox.setPreferredSize(new java.awt.Dimension(115, 20));
        methodCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                methodComboboxActionPerformed(evt);
            }
        });

        icpPanel.setVisible(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jLabel5.text")); // NOI18N

        areaCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Full scan", "Automatic mask", "Area combination", "Manual selection" }));
        areaCombobox.setEnabled(false);
        areaCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaComboboxActionPerformed(evt);
            }
        });

        jPanel4.setVisible(false);

        org.openide.awt.Mnemonics.setLocalizedText(forheadCheckbox, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.forheadCheckbox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(eyebrowsCheckbox, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.eyebrowsCheckbox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(chinCheckbox, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.chinCheckbox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(eyesCheckbox, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.eyesCheckbox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(noseCheckbox, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.noseCheckbox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(earsCheckbox, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.earsCheckbox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(mouthCheckbox, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.mouthCheckbox.text")); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(earsCheckbox)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(forheadCheckbox)
                            .addComponent(eyesCheckbox)
                            .addComponent(mouthCheckbox))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chinCheckbox)
                            .addComponent(noseCheckbox)
                            .addComponent(eyebrowsCheckbox))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(forheadCheckbox)
                    .addComponent(eyebrowsCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eyesCheckbox)
                    .addComponent(noseCheckbox))
                .addGap(0, 0, 0)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mouthCheckbox)
                    .addComponent(chinCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(earsCheckbox))
        );

        maxIterSpinner.setModel(new javax.swing.SpinnerNumberModel(15, 0, null, 1));
        maxIterSpinner.setValue(15);
        maxIterSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxIterSpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jLabel6.text")); // NOI18N

        errorSpinner.setModel(new javax.swing.SpinnerNumberModel(0.05f, 0.0f, null, 0.01f));
        errorSpinner.setValue(0.05f);
        errorSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                errorSpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jLabel7.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jLabel10.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(icpScaleCheckbox, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.icpScaleCheckbox.text")); // NOI18N
        icpScaleCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                icpScaleCheckboxActionPerformed(evt);
            }
        });

        discPanel.setVisible(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jLabel9.text")); // NOI18N

        undersamplingRadiusSlider.setMajorTickSpacing(25);
        undersamplingRadiusSlider.setMinorTickSpacing(5);
        undersamplingRadiusSlider.setPaintLabels(true);
        undersamplingRadiusSlider.setPaintTicks(true);
        undersamplingRadiusSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                undersamplingRadiusSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout discPanelLayout = new javax.swing.GroupLayout(discPanel);
        discPanel.setLayout(discPanelLayout);
        discPanelLayout.setHorizontalGroup(
            discPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(discPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(undersamplingRadiusSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        discPanelLayout.setVerticalGroup(
            discPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(discPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(discPanelLayout.createSequentialGroup()
                .addComponent(undersamplingRadiusSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        undersamplingCombobox.setModel(new DefaultComboBoxModel(Methods.values()));
        undersamplingCombobox.setSelectedItem(0);
        undersamplingCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undersamplingComboboxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel14, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jLabel14.text")); // NOI18N

        buttonGroup2.add(percentageJRadio);
        percentageJRadio.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(percentageJRadio, org.openide.util.NbBundle.getMessage(GUIController.class, "registration.undersampling.percentage")); // NOI18N
        percentageJRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentageJRadioActionPerformed(evt);
            }
        });

        buttonGroup2.add(numberJRadio);
        org.openide.awt.Mnemonics.setLocalizedText(numberJRadio, org.openide.util.NbBundle.getMessage(GUIController.class, "registration.undersampling.number")); // NOI18N
        numberJRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberJRadioActionPerformed(evt);
            }
        });

        percentageSpinner.setModel(new javax.swing.SpinnerNumberModel(50, 0, 100, 1));
        percentageSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                percentageSpinnerStateChanged(evt);
            }
        });

        numberSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        numberSpinner.setEnabled(false);
        numberSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numberSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout randomPanelLayout = new javax.swing.GroupLayout(randomPanel);
        randomPanel.setLayout(randomPanelLayout);
        randomPanelLayout.setHorizontalGroup(
            randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(randomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(randomPanelLayout.createSequentialGroup()
                        .addComponent(numberJRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(numberSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(randomPanelLayout.createSequentialGroup()
                        .addComponent(percentageJRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(percentageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        randomPanelLayout.setVerticalGroup(
            randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(randomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(percentageJRadio)
                    .addComponent(percentageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberJRadio)
                    .addComponent(numberSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(icpMetricLabel, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.icpMetricLabel.text")); // NOI18N

        icpMetricComboBox.setModel(new DefaultComboBoxModel(ICPmetric.values()));
        icpMetricComboBox.setSelectedItem(0);
        icpMetricComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                icpMetricComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel11, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jLabel11.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(symModCheckbox, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.symModCheckbox.text")); // NOI18N
        symModCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                symModCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout icpPanelLayout = new javax.swing.GroupLayout(icpPanel);
        icpPanel.setLayout(icpPanelLayout);
        icpPanelLayout.setHorizontalGroup(
            icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(icpPanelLayout.createSequentialGroup()
                .addComponent(jLabel5)
                .addGap(31, 31, 31)
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(icpPanelLayout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(45, Short.MAX_VALUE))
                    .addComponent(areaCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(icpPanelLayout.createSequentialGroup()
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(icpPanelLayout.createSequentialGroup()
                        .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(icpMetricLabel)
                            .addComponent(jLabel7)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10))
                        .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(icpPanelLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(icpMetricComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(icpPanelLayout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(errorSpinner)
                                    .addComponent(maxIterSpinner)
                                    .addGroup(icpPanelLayout.createSequentialGroup()
                                        .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(symModCheckbox)
                                            .addComponent(icpScaleCheckbox))
                                        .addGap(0, 0, Short.MAX_VALUE))))))
                    .addComponent(randomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(icpPanelLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(undersamplingCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(discPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        icpPanelLayout.setVerticalGroup(
            icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(icpPanelLayout.createSequentialGroup()
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(areaCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(icpMetricComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(icpMetricLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(icpScaleCheckbox, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(symModCheckbox, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(errorSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(maxIterSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(icpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(undersamplingCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(randomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(discPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jLabel12.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(registerButton, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.registerButton.text")); // NOI18N
        registerButton.setEnabled(false);
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        showFpInfoCheckbox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(showFpInfoCheckbox, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.showFpInfoCheckbox.text")); // NOI18N
        showFpInfoCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showFpInfoCheckboxActionPerformed(evt);
            }
        });

        fpColorPanel.setBackground(new java.awt.Color(255, 19, 27));
        fpColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fpColorPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        fpColorPanel.setEnabled(false);
        fpColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fpColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout fpColorPanelLayout = new javax.swing.GroupLayout(fpColorPanel);
        fpColorPanel.setLayout(fpColorPanelLayout);
        fpColorPanelLayout.setHorizontalGroup(
            fpColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        fpColorPanelLayout.setVerticalGroup(
            fpColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jLabel4.text")); // NOI18N

        fpSizeSlider.setMaximum(50);
        fpSizeSlider.setMinimum(10);
        fpSizeSlider.setToolTipText(org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.fpSizeSlider.toolTipText")); // NOI18N
        fpSizeSlider.setValue(20);
        fpSizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fpSizeSliderStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jLabel1.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jTextField1.text")); // NOI18N
        jTextField1.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jButton2.text")); // NOI18N
        jButton2.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(calculatePointsButton, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.calculatePointsButton.text")); // NOI18N
        calculatePointsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculatePointsButtonActionPerformed(evt);
            }
        });

        jPanel2.setLayout(new java.awt.GridLayout(2, 0));

        org.openide.awt.Mnemonics.setLocalizedText(addPointButton, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.addPointButton.text")); // NOI18N
        addPointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPointButtonActionPerformed(evt);
            }
        });
        jPanel2.add(addPointButton);

        org.openide.awt.Mnemonics.setLocalizedText(removePointButton, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.removePointButton.text")); // NOI18N
        removePointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePointButtonActionPerformed(evt);
            }
        });
        jPanel2.add(removePointButton);

        org.openide.awt.Mnemonics.setLocalizedText(editPointButton, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.editPointButton.text")); // NOI18N
        editPointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPointButtonActionPerformed(evt);
            }
        });
        jPanel2.add(editPointButton);

        org.openide.awt.Mnemonics.setLocalizedText(validateButton, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.validateButton.text")); // NOI18N
        validateButton.setToolTipText(org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.validateButton.toolTipText")); // NOI18N
        validateButton.setEnabled(false);
        validateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateButtonActionPerformed(evt);
            }
        });
        jPanel2.add(validateButton);

        org.openide.awt.Mnemonics.setLocalizedText(loadPointsButton, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.loadPointsButton.text")); // NOI18N
        loadPointsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadPointsButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(exportPointsButton, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.exportPointsButton.text")); // NOI18N
        exportPointsButton.setEnabled(false);
        exportPointsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPointsButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(saveStencilButton, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.saveStencilButton.text")); // NOI18N
        saveStencilButton.setEnabled(false);
        saveStencilButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveStencilButtonActionPerformed(evt);
            }
        });

        fpThresholdSlider.setMajorTickSpacing(20);
        fpThresholdSlider.setMinorTickSpacing(5);
        fpThresholdSlider.setPaintLabels(true);
        fpThresholdSlider.setPaintTicks(true);
        fpThresholdSlider.setValue(30);
        fpThresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fpThresholdSliderStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jLabel13.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jLabel8.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(fpScaleCheckBox, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.fpScaleCheckBox.text")); // NOI18N
        fpScaleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fpScaleCheckBoxActionPerformed(evt);
            }
        });

        trainingModelSelection.setModel(new DefaultComboBoxModel<>(RegistrationMethod.values()));
        trainingModelSelection.setMaximumSize(new java.awt.Dimension(115, 25));
        trainingModelSelection.setMinimumSize(new java.awt.Dimension(115, 20));
        trainingModelSelection.setPreferredSize(new java.awt.Dimension(115, 20));
        trainingModelSelection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                trainingModelSelectionItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel15, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jLabel15.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(choosePointsButton, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.choosePointsButton.text")); // NOI18N
        choosePointsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choosePointsButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel16, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jLabel16.text")); // NOI18N

        javax.swing.GroupLayout procrustesPanelLayout = new javax.swing.GroupLayout(procrustesPanel);
        procrustesPanel.setLayout(procrustesPanelLayout);
        procrustesPanelLayout.setHorizontalGroup(
            procrustesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, procrustesPanelLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(procrustesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fpSizeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(procrustesPanelLayout.createSequentialGroup()
                        .addComponent(fpColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
            .addComponent(calculatePointsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(loadPointsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(exportPointsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(saveStencilButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(procrustesPanelLayout.createSequentialGroup()
                .addGroup(procrustesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(showFpInfoCheckbox))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(procrustesPanelLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, procrustesPanelLayout.createSequentialGroup()
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(trainingModelSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(procrustesPanelLayout.createSequentialGroup()
                .addGroup(procrustesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(procrustesPanelLayout.createSequentialGroup()
                        .addGroup(procrustesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(procrustesPanelLayout.createSequentialGroup()
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(procrustesPanelLayout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(10, 10, 10)))
                        .addGroup(procrustesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fpScaleCheckBox)
                            .addComponent(fpThresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, procrustesPanelLayout.createSequentialGroup()
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(choosePointsButton)))
                .addContainerGap())
        );
        procrustesPanelLayout.setVerticalGroup(
            procrustesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, procrustesPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(procrustesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(procrustesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trainingModelSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(procrustesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(choosePointsButton)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calculatePointsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadPointsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportPointsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveStencilButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(procrustesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fpScaleCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(procrustesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fpThresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showFpInfoCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(procrustesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fpColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(procrustesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(fpSizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        Hashtable tresholdTable = new Hashtable();
        tresholdTable.put(new Integer(0), new JLabel("0"));
        tresholdTable.put(new Integer(20), new JLabel("0,2"));
        tresholdTable.put(new Integer(40), new JLabel("0,4"));
        tresholdTable.put(new Integer(60), new JLabel("0,6"));
        tresholdTable.put(new Integer(80), new JLabel("0,8"));
        tresholdTable.put(new Integer(100), new JLabel("1"));
        fpThresholdSlider.setLabelTable(tresholdTable);
        jLabel15.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jLabel15.AccessibleContext.accessibleName")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(continueComparisonCheckbox, org.openide.util.NbBundle.getMessage(PairRegistrationConfiguration.class, "PairRegistrationConfiguration.continueComparisonCheckbox.text")); // NOI18N
        continueComparisonCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueComparisonCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(continueComparisonCheckbox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                            .addComponent(registerButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(icpPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 58, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(procrustesPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(36, 36, 36)
                                .addComponent(methodCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(methodCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(procrustesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(icpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(continueComparisonCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(registerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private Boolean areFPCalculated(ProjectTopComponent comp) {
        List<FacialPoint> facialPoints = comp.getViewerPanel_2Faces().getListener1().getFacialPoints();
        List<FacialPoint> facialPoints2 = comp.getViewerPanel_2Faces().getListener2().getFacialPoints();
        if (facialPoints == null || facialPoints2 == null ||
                facialPoints.isEmpty() || facialPoints2.isEmpty()) {
            return false;
        }
        return true;
    }

    private Boolean areModelsLoaded(ProjectTopComponent tc) {
        final Model mainFace = tc.getViewerPanel_2Faces().getListener1().getModel(); //hlavny model v lavom panele
        final Model compareFace = tc.getViewerPanel_2Faces().getListener2().getModel();
        if (mainFace != null && compareFace != null) {
            return true;
        }
        return false;
    }

    private void methodComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_methodComboboxActionPerformed
        switch ((RegistrationMethod) methodCombobox.getSelectedItem()) {
            case PROCRUSTES:
                procrustesPanel.setVisible(true);
                icpPanel.setVisible(false);
                registerButton.setEnabled(areFPCalculated(GUIController.getSelectedProjectTopComponent()));
                exportPointsButton.setEnabled(areFPCalculated(GUIController.getSelectedProjectTopComponent()));
                break;
            case HAUSDORFF:
                procrustesPanel.setVisible(false);
                icpPanel.setVisible(true);
                registerButton.setEnabled(areModelsLoaded(GUIController.getSelectedProjectTopComponent()));
                break;
            default:
                procrustesPanel.setVisible(false);
                icpPanel.setVisible(false);
                registerButton.setEnabled(areModelsLoaded(GUIController.getSelectedProjectTopComponent()));
                break;
        }
        getContext().setRegistrationMethod((RegistrationMethod) methodCombobox.getSelectedItem());

    }//GEN-LAST:event_methodComboboxActionPerformed


    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       //don't need to refactor elsewhere?
        colorDialog.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        //don't need to refactor elsewhere?
        colorDialog.setVisible(false);
        fpColorPanel.setBackground(jColorChooser1.getColor());
    }//GEN-LAST:event_jButton5ActionPerformed

    private void areaComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaComboboxActionPerformed
        //not functional atm
        if (areaCombobox.getSelectedIndex() == 2) {
            jPanel4.setVisible(true);
        } else {
            jPanel4.setVisible(false);
        }
    }//GEN-LAST:event_areaComboboxActionPerformed

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        final Model mainFace = tc.getViewerPanel_2Faces().getListener1().getModel(); //hlavny model v lavom panele
        final Model compareFace = tc.getViewerPanel_2Faces().getListener2().getModel(); //vedlajsi model v pravom panele
        final Comparison2Faces c = getContext(); //data model

        registerButton.setEnabled(false);
        Runnable run = new Runnable() {
            @Override
            public void run() {
                if (c.getRegistrationMethod() == RegistrationMethod.HAUSDORFF) {

                    if (mainFace == null || compareFace == null) {
                        System.out.print("Some models were not loaded.");
                        return;
                    }

                    ProgressHandle p;
                    p = ProgressHandleFactory.createHandle("Computing ICP...");

                    try {

                        p.start(100);

                        Icp.instance().setP(p);
                        SurfaceComparisonProcessing.setP(p);
                        KdTree mainF = null;
                        Model mFace = mainFace;
                        Model cFace = compareFace;

                        if (c.isUseSymmetry()) {
                            SurfaceComparisonProcessing.instance().createSymetricModelNoCopy(mFace);
                            SurfaceComparisonProcessing.instance().createSymetricModelNoCopy(cFace);
                        }

                        if (c.getIcpMetric() == ICPmetric.VERTEX_TO_VERTEX) {
                            mainF = new KDTreeIndexed(mainFace.getVerts());
                        } else {
                            mainF = new KdTreeFaces(mainFace.getVerts(), mainFace.getFaces());
                        }

                        c.setMainFace(mainF);

                        Methods m = Methods.values()[c.getMethod()];
                        Type t = SurfaceComparisonProcessing.instance().getSelectedType(m, buttonGroup2);
                        float value = getUndersampleValue(m, t);

                        SurfaceComparisonProcessing.instance().processOneToOne(mainF, compareFace, c.getICPmaxIteration(), c.getScaleEnabled(), c.getICPerrorRate(),
                                m, t, value, c);

                        p.finish();
                        
                        // apply registration to facial points as well
                        List<FacialPoint> regFp = Icp.instance().applyFacialPointsRegistration(c.getSecondaryFp(), c.getCompFTransformations(), c.getScaleEnabled());
                        c.setSecondaryFp(regFp);
                        tc.getViewerPanel_2Faces().getListener2().setFacialPoints(regFp);

                        tc.getViewerPanel_2Faces().setResultButtonVisible(true, 0);
                        tc.getViewerPanel_2Faces().getListener1().addModel(cFace);

                        registerButton.setEnabled(true);
                        c.setState(2);
                        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().setResultButtonVisible(true, 0);

                        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getCanvas1().createResultIcon();
                        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getCanvas1().showModelIcon();

                      
                    } catch (Exception ex) {
                        Exceptions.printStackTrace(ex);
                        registerButton.setEnabled(true);
                    } finally {
                        p.finish();
                    }
                } else if (c.getRegistrationMethod() == RegistrationMethod.PROCRUSTES) {
                    try {
                        
                        
                        Procrustes2Models procrustes = new Procrustes2Models(c.getMainFp(), mainFace.getVerts(),
                                c.getSecondaryFp(), compareFace.getVerts(), c.isFpScaling());

                        List<ICPTransformation> trans = procrustes.getPa().doProcrustesAnalysis(procrustes.getPa2(), c.isFpScaling());
                        
                        if(trans == null){
                            int res = JOptionPane.showConfirmDialog(tc, "There wasn't enough corresponding landmarks to register models. Do you wish to continue?", "Not enough landmarks", JOptionPane.YES_NO_OPTION);
                            if(res == JOptionPane.NO_OPTION){
                               registerButton.setEnabled(true);
                               return; 
                            }else if(res == JOptionPane.YES_OPTION){
                                noRegistration();
                                finalizeRegistration();
                                return;
                            }
                                
                        }
                                                  
                        c.getModel1().setVerts(procrustes.getPa().getVertices());
                        c.getModel2().setVerts(procrustes.getPa2().getVertices());

                        tc.getViewerPanel_2Faces().getListener1().setModels(c.getModel1());
                        tc.getViewerPanel_2Faces().getListener2().setModels(c.getModel2());

                        tc.getViewerPanel_2Faces().getListener1().setFacialPoints(procrustes.getPa().getFacialPoints());
                        tc.getViewerPanel_2Faces().getListener2().setFacialPoints(procrustes.getPa2().getFacialPoints());
                        c.setMainFp(procrustes.getPa().getFacialPoints());
                        c.setSecondaryFp(procrustes.getPa2().getFacialPoints());

                        if (fpScaleCheckBox.isSelected()) {
                            //tc.getViewerPanel_2Faces().getListener1().setCameraPosition(0, 0, 7);
                            tc.getViewerPanel_2Faces().getListener1().setFacialPointRadius(fpSizeSlider.getValue() / 1000f);

                            //tc.getViewerPanel_2Faces().getListener2().setCameraPosition(0, 0, 7);
                            tc.getViewerPanel_2Faces().getListener2().setFacialPointRadius(fpSizeSlider.getValue() / 1000f);
                        }

                        procrustes.getPa().updateFacialPoints(c.getMainFp());
                        procrustes.getPa2().updateFacialPoints(c.getSecondaryFp());

                        c.setCompFTransformations(trans);

                    } catch (FileNotFoundException ex) {
                        Exceptions.printStackTrace(ex);

                    }

                    
                    //nacitaj prvy model otoceny!!  ??
                    //   Model model = l.loadModel(tc.getProject().getSelectedComparison2Faces().getModel1().getFile(), false, true);
                    Model model = tc.getViewerPanel_2Faces().getListener2().getModel();
                    tc.getViewerPanel_2Faces().getListener1().addModel(model);

                    c.setState(2);
                    GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().setResultButtonVisible(true, 0);

                    GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getCanvas1().createResultIcon();
                    GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getCanvas1().showModelIcon();
                    

                } else {

                    noRegistration();                  
                }

                finalizeRegistration();
            }

            private void finalizeRegistration() {
                TwoFacesGUISetup.setUpDefaultComparisonConfigurationData(c);
                
                if (GUIController.getSelectedProjectTopComponent() == tc) {
                    GUIController.getConfigurationTopComponent().addComparisonComponent();
                }
                
                if (c.isContinueComparison()) {
                    GUIController.getConfigurationTopComponent().getPairComparisonConfiguration().computeComparison(tc);
                }
            }

            private void noRegistration() {
                
                Model model = ModelLoader.instance().loadModel(c.getModel2().getFile(), false, true);
                tc.getViewerPanel_2Faces().getListener1().addModel(model);
                
                c.setState(2);
                GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().setResultButtonVisible(true, 0);
                
                GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getCanvas1().createResultIcon();
                GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getCanvas1().showModelIcon();
            }

        };
        Thread t = new Thread(run);

        t.start(); // start the task and progress visualisation 

        
        //keep this line in GUI

        GUIController.updateNavigator();
    }//GEN-LAST:event_registerButtonActionPerformed

    private int getUndersampleValue(Methods m, Type t) {
        if (m == Methods.Curvature || m == Methods.Random) {
            switch (t) {
                case PERCENTAGE:
                    return (int) percentageSpinner.getValue();
                case NUMBER:
                    return (int) numberSpinner.getValue();
                default:
                    return -1;
            }
        } else if (m == Methods.Disc) {
            return undersamplingRadiusSlider.getValue();
        }

        return -1;
    }
    
    public Boolean validate(ImportPanel p) {
        String path = p.getFileName();
        if (!new File(path).exists()) {
            return false;
        }
        return true;
    }

    public Boolean validate(ExportPanel p) {
        String path = p.getFolderName();
        if (!new File(path).exists() || p.getFileName().isEmpty()) {
            return false;
        }
        return true;
    }


    private void errorSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_errorSpinnerStateChanged
        getContext().setICPerrorRate((float) errorSpinner.getValue());

    }//GEN-LAST:event_errorSpinnerStateChanged

    private void maxIterSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxIterSpinnerStateChanged
        getContext().setICPmaxIteration((int) maxIterSpinner.getValue());

    }//GEN-LAST:event_maxIterSpinnerStateChanged

    private void icpScaleCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_icpScaleCheckboxActionPerformed
        getContext().setScaleEnabled(icpScaleCheckbox.isSelected());
    }//GEN-LAST:event_icpScaleCheckboxActionPerformed

    private void percentageJRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentageJRadioActionPerformed
        percentageSpinner.setEnabled(true);
        numberSpinner.setEnabled(false);
       getContext().setType(Type.PERCENTAGE.ordinal());
    }//GEN-LAST:event_percentageJRadioActionPerformed

    private void numberJRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberJRadioActionPerformed
        percentageSpinner.setEnabled(false);
        numberSpinner.setEnabled(true);
        getContext().setType(Type.NUMBER.ordinal());
    }//GEN-LAST:event_numberJRadioActionPerformed

    private void percentageSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_percentageSpinnerStateChanged
        getContext().setValue(Float.parseFloat(percentageSpinner.getValue().toString()));
    }//GEN-LAST:event_percentageSpinnerStateChanged

    private void numberSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numberSpinnerStateChanged
        //was messing up programme if value was taken directly
        if(numberSpinner.getValue() != null)
            getContext().setValue(Float.parseFloat(numberSpinner.getValue().toString()));
    }//GEN-LAST:event_numberSpinnerStateChanged

    private void undersamplingComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undersamplingComboboxActionPerformed
        
        switch ((Methods) undersamplingCombobox.getSelectedItem()) {
            case Curvature:
            case Random: //Random
                randomPanel.setVisible(true);
                discPanel.setVisible(false);
                break;
            case Disc:
                randomPanel.setVisible(false);
                discPanel.setVisible(true);
                break;
            case None:
                randomPanel.setVisible(false);
                discPanel.setVisible(false);
                break;
        }
        
        getContext().setMethod(undersamplingCombobox.getSelectedIndex());
    }//GEN-LAST:event_undersamplingComboboxActionPerformed

    private void icpMetricComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_icpMetricComboBoxActionPerformed
      getContext().setIcpMetric((ICPmetric) icpMetricComboBox.getSelectedItem());
    }//GEN-LAST:event_icpMetricComboBoxActionPerformed

    private void symModCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_symModCheckboxActionPerformed
        getContext().setUseSymmetry(symModCheckbox.isSelected());
    }//GEN-LAST:event_symModCheckboxActionPerformed

    private void undersamplingRadiusSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_undersamplingRadiusSliderStateChanged
       getContext().setValue(undersamplingRadiusSlider.getValue());
    }//GEN-LAST:event_undersamplingRadiusSliderStateChanged

    private void continueComparisonCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueComparisonCheckboxActionPerformed
        getContext().setContinueComparison(continueComparisonCheckbox.isSelected());
    }//GEN-LAST:event_continueComparisonCheckboxActionPerformed

    private void trainingModelSelectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_trainingModelSelectionItemStateChanged
        try {
            LandmarkLocalization.setTrainingModel(trainingModelSelection.getSelectedItem().toString());
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_trainingModelSelectionItemStateChanged

    private void fpScaleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpScaleCheckBoxActionPerformed
        getContext().setFpScaling(fpScaleCheckBox.isSelected());
    }//GEN-LAST:event_fpScaleCheckBoxActionPerformed

    private void fpThresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fpThresholdSliderStateChanged
        getContext().setFpTreshold(fpThresholdSlider.getValue());
    }//GEN-LAST:event_fpThresholdSliderStateChanged

    private void saveStencilButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveStencilButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveStencilButtonActionPerformed

    private void exportPointsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPointsButtonActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        Comparison2Faces c = getContext();
        FPImportExport.instance().exportTwoFaces(tc,
            c.getMainFp(),
            c.getModel1(),
            c.getSecondaryFp(),
            c.getModel2());
    }//GEN-LAST:event_exportPointsButtonActionPerformed

    private void loadPointsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadPointsButtonActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        List<FpModel> loaded = FPImportExport.instance().importPoints(tc, true);

        if (loaded == null || loaded.isEmpty()) {
            //nothing loaded
            return;
        }

        tc.getViewerPanel_2Faces().getListener1().setTransformations(null);
        tc.getViewerPanel_2Faces().getListener2().setTransformations(null);

        List<File> models = new ArrayList<>();
        if (tc.getViewerPanel_2Faces().getListener1().getModel() != null) {
            models.add(tc.getViewerPanel_2Faces().getListener1().getModel().getFile());
        }

        if (tc.getViewerPanel_2Faces().getListener2().getModel() != null) {
            models.add(tc.getViewerPanel_2Faces().getListener2().getModel().getFile());
        }

        FPImportExport.instance().alignPointsToModels(loaded, models);

        for (FpModel model : loaded) {
            if (tc.getViewerPanel_2Faces().getListener1().getModel() != null
                && model.getModelName().equals(tc.getViewerPanel_2Faces().getListener1().getModel().getName())) {
                tc.getViewerPanel_2Faces().getListener1().initFpUniverse(model.getFacialPoints());
                getContext().setMainFp(model.getFacialPoints());
                getContext().setOriginalMainFp(model.createListFp());
            }

            if (tc.getViewerPanel_2Faces().getListener2().getModel() != null
                && model.getModelName().equals(tc.getViewerPanel_2Faces().getListener2().getModel().getName())) {
                tc.getViewerPanel_2Faces().getListener2().initFpUniverse(model.getFacialPoints());
                getContext().setSecondaryFp(model.getFacialPoints());
                getContext().setOriginalSecondaryFp(model.createListFp());
            }
        }

        registerButton.setEnabled(areFPCalculated(tc));
        exportPointsButton.setEnabled(areFPCalculated(tc));

    }//GEN-LAST:event_loadPointsButtonActionPerformed

    private void validateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_validateButtonActionPerformed

    private void editPointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPointButtonActionPerformed
        //make sure canvas takes info from Comparison2Faces
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().setEditablePoints(editPointButton.isSelected());
        removePointButton.setSelected(false);
        addPointButton.setSelected(false);
    }//GEN-LAST:event_editPointButtonActionPerformed

    private void removePointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePointButtonActionPerformed
        //make sure canvas takes info from Comparison2Faces

        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().setRemovePoints(removePointButton.isSelected());
        addPointButton.setSelected(false);
        editPointButton.setSelected(false);
    }//GEN-LAST:event_removePointButtonActionPerformed

    private void addPointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPointButtonActionPerformed
        //make sure canvas takes info from Comparison2Faces

        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().setAddPoints(addPointButton.isSelected());
        removePointButton.setSelected(false);
        editPointButton.setSelected(false);
    }//GEN-LAST:event_addPointButtonActionPerformed

    private void calculatePointsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculatePointsButtonActionPerformed
        
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        final Comparison2Faces c = getContext();
        if (areModelsLoaded(tc)) {
            Runnable run = new Runnable() {

                @Override
                public void run() {
                    
                    calculatePointsButton.setEnabled(false);
                    FpResultsPair res = FpProcessing.instance().calculatePointsPair(cancelTask, tc.getViewerPanel_2Faces().getListener1().getModel(), tc.getViewerPanel_2Faces().getListener2().getModel(),
                        registerButton, exportPointsButton, calculatePointsButton, dialog.getPointsArray());

                    List<FacialPoint> mainCopy = new ArrayList<>();
                    List<FacialPoint> secondaryCopy = new ArrayList<>();

                    for(FacialPoint fp : res.getMainFps()){
                        mainCopy.add(fp.deepCopyFp());
                    }

                    for(FacialPoint fp : res.getSecondaryFps()){
                        secondaryCopy.add(fp.deepCopyFp());
                    }

                    tc.getViewerPanel_2Faces().getListener1().initFpUniverse(res.getMainFps());
                    tc.getViewerPanel_2Faces().getListener2().initFpUniverse(res.getSecondaryFps());

                    c.setOriginalMainFp(mainCopy);
                    c.setOriginalSecondaryFp(secondaryCopy);

                    c.setMainFp(res.getMainFps());
                    c.setSecondaryFp(res.getSecondaryFps());
                }
            };

            currentTask = new Thread(run);
            currentTask.start();

        }
    }//GEN-LAST:event_calculatePointsButtonActionPerformed

    private void fpSizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fpSizeSliderStateChanged
        setFacialPointRadius();
    }//GEN-LAST:event_fpSizeSliderStateChanged

    private void fpColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fpColorPanelMouseClicked
        jColorChooser1.setColor(fpColorPanel.getBackground());
        colorDialog.setVisible(true);
        setColor();
    }//GEN-LAST:event_fpColorPanelMouseClicked

    private void showFpInfoCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFpInfoCheckboxActionPerformed
        //change listener to take info from Comparison2Faces where showInfo was used!

        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().showInfo(showFpInfoCheckbox.isSelected());
        getContext().setShowPointInfo(showFpInfoCheckbox.isSelected());
    }//GEN-LAST:event_showFpInfoCheckboxActionPerformed

    private void choosePointsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choosePointsButtonActionPerformed
        JFrame frame = new JFrame();
        frame.add(dialog);
        frame.setSize(dialog.getPreferredSize());
        frame.setVisible(true);
    }//GEN-LAST:event_choosePointsButtonActionPerformed
    
    private void setColor() {
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setColorOfPoint(fpColorPanel.getBackground().getRGBColorComponents(new float[3]));
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener2().setColorOfPoint(fpColorPanel.getBackground().getRGBColorComponents(new float[3]));
        getContext().setPointColor(fpColorPanel.getBackground());

    }

    private void setFacialPointRadius() {
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFacialPointRadius(fpSizeSlider.getValue() / 10.0f);
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener2().setFacialPointRadius(fpSizeSlider.getValue() / 10.0f);
        getContext().setFpSize(fpSizeSlider.getValue());

    }


    public void setConfiguration() {
        Comparison2Faces c = getContext();
        
        if (c.isFirstCreated()) {
            //to check whether FPs can be exported once they are added, removed
            ObservableMaster o = new ObservableMaster();
            ExportFPButtonObserver export = new ExportFPButtonObserver(exportPointsButton,
                    c.getMainFp(), "main", c.getSecondaryFp(), "secondary");        //main and secondary as dummy names same as below
            
            //main and secondary are dummy names, only created for observer, this needs to be done since when project is created
            //there are no models loaded so the actual name would need to be added later
            RegisterFPButtonObserver register = new RegisterFPButtonObserver(registerButton, c.getMainFp(), "main",
            c.getSecondaryFp(), "secondary");       
            o.addObserver(export);
            o.addObserver(register);

            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().setFpExportEnable(o);
            TwoFacesGUISetup.setUpDefaultRegistrationData(c);   //this method will set firstCreated to false
        }
        
        
        methodCombobox.setSelectedItem(c.getRegistrationMethod());
        
        
        //set up values from data model
       methodCombobox.setSelectedIndex(c.getRegistrationMethod().ordinal());
       
       //FP
       fpScaleCheckBox.setSelected(c.isFpScaling());
       fpThresholdSlider.setValue(c.getFpTreshold());
       showFpInfoCheckbox.setSelected(c.isShowPointInfo());
       fpColorPanel.setBackground(c.getPointColor());
       fpSizeSlider.setValue(c.getFpSize());
       
       //ICP
       icpMetricComboBox.setSelectedIndex(c.getIcpMetric().ordinal());
       icpScaleCheckbox.setSelected(c.getScaleEnabled());
       symModCheckbox.setSelected(c.isUseSymmetry());
       errorSpinner.setValue(c.getICPerrorRate());
       maxIterSpinner.setValue(c.getICPmaxIteration());
       undersamplingCombobox.setSelectedIndex(c.getMethod());
       
       //default values
       percentageSpinner.setValue(c.getValue());
       numberSpinner.setValue(c.getValue());
       undersamplingRadiusSlider.setValue((int) c.getValue());
       
       if(c.getMethod() == Methods.Curvature.ordinal() ||
           c.getMethod() == Methods.Random.ordinal()){
           if(c.getType() == Type.NUMBER.ordinal()){
               percentageSpinner.setValue(50);
               percentageSpinner.setEnabled(false);
               numberJRadio.setSelected(true);
               numberSpinner.setEnabled(true);
           }else{
               numberSpinner.setValue(0);
               percentageJRadio.setSelected(true);
               percentageSpinner.setEnabled(true);
               numberSpinner.setEnabled(false);
           }
       }else if(c.getMethod() == Methods.Disc.ordinal()){
           percentageSpinner.setValue(50);
           numberSpinner.setValue(0);
           numberSpinner.setEnabled(false);
       }else{
           percentageSpinner.setValue(50);
           numberSpinner.setValue(50);
           undersamplingRadiusSlider.setValue(50);
       }
       
       continueComparisonCheckbox.setSelected(c.isContinueComparison());


        //icpScaleCheckbox.setSelected(c.getScaleEnabled());
        if ((methodCombobox.getSelectedIndex() == 0 && !areFPCalculated(GUIController.getSelectedProjectTopComponent())) || (!areModelsLoaded(GUIController.getSelectedProjectTopComponent()))) {
            registerButton.setEnabled(false);
            exportPointsButton.setEnabled(false);
        } else {
            registerButton.setEnabled(true);
            exportPointsButton.setEnabled(true);
        }
        
        
        

    }
    
    private Comparison2Faces getContext(){
        return GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces();
    }

    public void updateRegisterButtonEnabled() {
        if ((methodCombobox.getSelectedIndex() == 0 && !areFPCalculated(GUIController.getSelectedProjectTopComponent())) || (!areModelsLoaded(GUIController.getSelectedProjectTopComponent()))) {
            registerButton.setEnabled(false);
            exportPointsButton.setEnabled(false);
        } else {
            registerButton.setEnabled(true);
            exportPointsButton.setEnabled(true);
        }
    }

    private void setNamesForComboBox(){
        try {
            File folder = new File((new java.io.File(".").getCanonicalPath() + separatorChar + "models" + separatorChar + "resources" + separatorChar + "trainingModels"));
            File[] listOfFiles = folder.listFiles();
            String[] namesOfFiles = new String[listOfFiles.length];
            
            for (int i = 0; i < listOfFiles.length; i++) {
                
                namesOfFiles[i] = listOfFiles[i].getName();
            
            }
            
            trainingModelSelection.setModel(new javax.swing.DefaultComboBoxModel(namesOfFiles));
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton addPointButton;
    private javax.swing.JComboBox areaCombobox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton calculatePointsButton;
    private javax.swing.JCheckBox chinCheckbox;
    private javax.swing.JButton choosePointsButton;
    private javax.swing.JDialog colorDialog;
    private javax.swing.JCheckBox continueComparisonCheckbox;
    private javax.swing.JPanel discPanel;
    private javax.swing.JCheckBox earsCheckbox;
    private javax.swing.JToggleButton editPointButton;
    private javax.swing.JSpinner errorSpinner;
    private javax.swing.JButton exportPointsButton;
    private javax.swing.JCheckBox eyebrowsCheckbox;
    private javax.swing.JCheckBox eyesCheckbox;
    private javax.swing.JCheckBox forheadCheckbox;
    private javax.swing.JPanel fpColorPanel;
    private javax.swing.JCheckBox fpScaleCheckBox;
    private javax.swing.JSlider fpSizeSlider;
    private javax.swing.JSlider fpThresholdSlider;
    private javax.swing.JComboBox<cz.fidentis.comparison.ICPmetric> icpMetricComboBox;
    private javax.swing.JLabel icpMetricLabel;
    private javax.swing.JPanel icpPanel;
    private javax.swing.JCheckBox icpScaleCheckbox;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton loadPointsButton;
    private javax.swing.JSpinner maxIterSpinner;
    private javax.swing.JComboBox methodCombobox;
    private javax.swing.JCheckBox mouthCheckbox;
    private javax.swing.JCheckBox noseCheckbox;
    private javax.swing.JRadioButton numberJRadio;
    private javax.swing.JSpinner numberSpinner;
    private javax.swing.JRadioButton percentageJRadio;
    private javax.swing.JSpinner percentageSpinner;
    private javax.swing.JPanel procrustesPanel;
    private javax.swing.JPanel randomPanel;
    private javax.swing.JButton registerButton;
    private javax.swing.JToggleButton removePointButton;
    private javax.swing.JButton saveStencilButton;
    private javax.swing.JCheckBox showFpInfoCheckbox;
    private javax.swing.JCheckBox symModCheckbox;
    private javax.swing.JComboBox trainingModelSelection;
    private javax.swing.JComboBox<cz.fidentis.undersampling.Methods> undersamplingCombobox;
    private javax.swing.JSlider undersamplingRadiusSlider;
    private javax.swing.JButton validateButton;
    // End of variables declaration//GEN-END:variables
}
