
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.fidentis.gui.comparison_batch;

import cz.fidentis.comparison.ICPmetric;
import cz.fidentis.comparison.RegistrationMethod;
import cz.fidentis.comparison.icp.ICPTransformation;
import cz.fidentis.comparison.icp.Icp;
import cz.fidentis.comparison.procrustes.ProcrustesBatchProcessing;
import cz.fidentis.controller.BatchComparison;
import cz.fidentis.featurepoints.FacialPoint;
import cz.fidentis.featurepoints.results.FpResultsBatch;
import cz.fidentis.gui.GUIController;
import cz.fidentis.gui.ProjectTopComponent;
import cz.fidentis.featurepoints.FpModel;
import cz.fidentis.gui.guisetup.BatchGUIsetup;
import cz.fidentis.gui.observer.ExportFPButtonObserver;
import cz.fidentis.gui.observer.ObservableMaster;
import cz.fidentis.gui.observer.RegisterFPButtonObserver;
import cz.fidentis.gui.trainingModel.PointsToCalculateTopComponent;
import cz.fidentis.model.Model;
import cz.fidentis.model.ModelLoader;
import cz.fidentis.processing.comparison.surfaceComparison.SurfaceComparisonProcessing;
import cz.fidentis.processing.exportProcessing.FPImportExport;
import cz.fidentis.processing.featurePoints.FpProcessing;
import cz.fidentis.processing.featurePoints.LandmarkLocalization;
import cz.fidentis.processing.fileUtils.ProcessingFileUtils;
import cz.fidentis.undersampling.Methods;
import cz.fidentis.undersampling.Type;
import cz.fidentis.utils.FileUtils;
import cz.fidentis.utilsException.FileManipulationException;
import java.awt.Dimension;
import java.io.File;
import static java.io.File.separatorChar;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Random;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.vecmath.Vector3f;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.util.Cancellable;
import org.openide.util.Exceptions;

/**
 *
 * @author Katka
 */
public class BatchRegistrationConfiguration extends javax.swing.JPanel {

    private Thread runningTask;
    private final Cancellable cancelTask;
    
    private PointsToCalculateTopComponent dialog = new PointsToCalculateTopComponent();

    /**
     * Creates new form RegistrationConfiguration
     */
    public BatchRegistrationConfiguration() {
        cancelTask = new Cancellable() {
            @Override
            public boolean cancel() {
                runningTask.interrupt();
                return true;
            }
        };
        initComponents();
        setNamesForComboBox();
        //jComboBox2ActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorDialog = new javax.swing.JDialog();
        jColorChooser1 = new javax.swing.JColorChooser();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        registrationMethodComboBox = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        icpMaxIterationSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        icpErrorSpinner = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        icpAvgMeshesSpinner = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        icpScaleCheckBox = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        undersamplingComboBox = new javax.swing.JComboBox<>();
        randomPanel = new javax.swing.JPanel();
        percentageRadioButton = new javax.swing.JRadioButton();
        numberRadioButton = new javax.swing.JRadioButton();
        percentageSpinner = new javax.swing.JSpinner();
        numberSpinner = new javax.swing.JSpinner();
        discPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        radiusSlider = new javax.swing.JSlider();
        jLabel15 = new javax.swing.JLabel();
        facesComboBox = new javax.swing.JComboBox();
        icpMetricLabel = new javax.swing.JLabel();
        icpMetricComboBox = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        symModelsCheckbox = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        registerButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        fpPointInfoCheckBox = new javax.swing.JCheckBox();
        fpColorPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fpSizeSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        addFpButton = new javax.swing.JToggleButton();
        removeFpButton = new javax.swing.JToggleButton();
        editFpButton = new javax.swing.JToggleButton();
        jButton9 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        loadFPButton = new javax.swing.JButton();
        exportFpButton = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        fpThresholdSlider = new javax.swing.JSlider();
        fpScaleCheckBox = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        trainingModelSelection = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        continueComparisonCheckBox = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();

        Dimension dimension = new Dimension();
        dimension.setSize(jColorChooser1.getPreferredSize().width + 5, jColorChooser1.getPreferredSize().height+80);
        colorDialog.setMinimumSize(dimension);
        colorDialog.setModal(true);
        colorDialog.setResizable(false);

        org.openide.awt.Mnemonics.setLocalizedText(jButton4, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton5, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jButton5.text")); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colorDialogLayout = new javax.swing.GroupLayout(colorDialog.getContentPane());
        colorDialog.getContentPane().setLayout(colorDialogLayout);
        colorDialogLayout.setHorizontalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addGap(6, 6, 6))
        );
        colorDialogLayout.setVerticalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorDialogLayout.createSequentialGroup()
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton4))
                .addGap(0, 69, Short.MAX_VALUE))
        );

        registrationMethodComboBox.setModel(new javax.swing.DefaultComboBoxModel(RegistrationMethod.values()));
        registrationMethodComboBox.setMaximumSize(new java.awt.Dimension(115, 25));
        registrationMethodComboBox.setMinimumSize(new java.awt.Dimension(115, 20));
        registrationMethodComboBox.setPreferredSize(new java.awt.Dimension(115, 20));
        registrationMethodComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrationMethodComboBoxActionPerformed(evt);
            }
        });

        jPanel3.setVisible(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel5.text")); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Full scan", "Automatic mask", "Area combination", "Manual selection" }));
        jComboBox1.setEnabled(false);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jPanel4.setVisible(false);

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox2, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jCheckBox2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox4, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jCheckBox4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox7, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jCheckBox7.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox3, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jCheckBox3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox6, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jCheckBox6.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox8, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jCheckBox8.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox5, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jCheckBox5.text")); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox8)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox2)
                            .addComponent(jCheckBox3)
                            .addComponent(jCheckBox5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox7)
                            .addComponent(jCheckBox6)
                            .addComponent(jCheckBox4))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox6))
                .addGap(0, 0, 0)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox5)
                    .addComponent(jCheckBox7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox8))
        );

        icpMaxIterationSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(10), Integer.valueOf(0), null, Integer.valueOf(1)));
        icpMaxIterationSpinner.setValue(15);
        icpMaxIterationSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                icpMaxIterationSpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel6.text")); // NOI18N

        icpErrorSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.05f), Float.valueOf(0.0f), null, Float.valueOf(0.01f)));
        icpErrorSpinner.setValue(0.05f);
        icpErrorSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                icpErrorSpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel7.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel8.text")); // NOI18N

        icpAvgMeshesSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(3), Integer.valueOf(0), null, Integer.valueOf(1)));
        icpAvgMeshesSpinner.setValue(3);
        icpAvgMeshesSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                icpAvgMeshesSpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel10.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(icpScaleCheckBox, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.icpScaleCheckBox.text")); // NOI18N
        icpScaleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                icpScaleCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel14, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel14.text")); // NOI18N

        undersamplingComboBox.setModel(new DefaultComboBoxModel(Methods.values()));
        undersamplingComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undersamplingComboBoxActionPerformed(evt);
            }
        });

        buttonGroup2.add(percentageRadioButton);
        percentageRadioButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(percentageRadioButton, org.openide.util.NbBundle.getMessage(GUIController.class, "registration.undersampling.percentage")); // NOI18N
        percentageRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentageRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup2.add(numberRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(numberRadioButton, org.openide.util.NbBundle.getMessage(GUIController.class, "registration.undersampling.number")); // NOI18N
        numberRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberRadioButtonActionPerformed(evt);
            }
        });

        percentageSpinner.setModel(new javax.swing.SpinnerNumberModel(50, 0, 100, 1));
        percentageSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                percentageSpinnerStateChanged(evt);
            }
        });

        numberSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        numberSpinner.setEnabled(false);
        numberSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numberSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout randomPanelLayout = new javax.swing.GroupLayout(randomPanel);
        randomPanel.setLayout(randomPanelLayout);
        randomPanelLayout.setHorizontalGroup(
            randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(randomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(randomPanelLayout.createSequentialGroup()
                        .addComponent(numberRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(numberSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(randomPanelLayout.createSequentialGroup()
                        .addComponent(percentageRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(percentageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        randomPanelLayout.setVerticalGroup(
            randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(randomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(percentageRadioButton)
                    .addComponent(percentageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberRadioButton)
                    .addComponent(numberSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        discPanel.setVisible(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel9.text")); // NOI18N

        radiusSlider.setMajorTickSpacing(25);
        radiusSlider.setMinorTickSpacing(5);
        radiusSlider.setPaintLabels(true);
        radiusSlider.setPaintTicks(true);

        javax.swing.GroupLayout discPanelLayout = new javax.swing.GroupLayout(discPanel);
        discPanel.setLayout(discPanelLayout);
        discPanelLayout.setHorizontalGroup(
            discPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(discPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radiusSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        discPanelLayout.setVerticalGroup(
            discPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(discPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(discPanelLayout.createSequentialGroup()
                .addComponent(radiusSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel15, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel15.text")); // NOI18N

        facesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facesComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(icpMetricLabel, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.icpMetricLabel.text")); // NOI18N

        icpMetricComboBox.setModel(new DefaultComboBoxModel(ICPmetric.values()));
        icpMetricComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                icpMetricComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel16, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel16.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(symModelsCheckbox, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.symModelsCheckbox.text")); // NOI18N
        symModelsCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                symModelsCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addComponent(discPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(icpAvgMeshesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(icpMaxIterationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(icpErrorSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(randomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(undersamplingComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(facesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(icpMetricLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(icpMetricComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(icpScaleCheckBox))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(symModelsCheckbox)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(icpMetricLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(icpMetricComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(icpScaleCheckBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel16)
                    .addComponent(symModelsCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(icpErrorSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(icpMaxIterationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(icpAvgMeshesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(facesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(undersamplingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(randomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(discPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel12.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(registerButton, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.registerButton.text")); // NOI18N
        registerButton.setEnabled(false);
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        fpPointInfoCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(fpPointInfoCheckBox, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.fpPointInfoCheckBox.text")); // NOI18N
        fpPointInfoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fpPointInfoCheckBoxActionPerformed(evt);
            }
        });

        fpColorPanel.setBackground(new java.awt.Color(255, 19, 27));
        fpColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fpColorPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        fpColorPanel.setEnabled(false);
        fpColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fpColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout fpColorPanelLayout = new javax.swing.GroupLayout(fpColorPanel);
        fpColorPanel.setLayout(fpColorPanelLayout);
        fpColorPanelLayout.setHorizontalGroup(
            fpColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        fpColorPanelLayout.setVerticalGroup(
            fpColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel4.text_1")); // NOI18N

        fpSizeSlider.setMaximum(50);
        fpSizeSlider.setMinimum(10);
        fpSizeSlider.setToolTipText(org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.fpSizeSlider.toolTipText")); // NOI18N
        fpSizeSlider.setValue(20);
        fpSizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fpSizeSliderStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel1.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jTextField1.text")); // NOI18N
        jTextField1.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jButton2.text")); // NOI18N
        jButton2.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel2.setLayout(new java.awt.GridLayout(2, 0));

        org.openide.awt.Mnemonics.setLocalizedText(addFpButton, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.addFpButton.text")); // NOI18N
        addFpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFpButtonActionPerformed(evt);
            }
        });
        jPanel2.add(addFpButton);

        org.openide.awt.Mnemonics.setLocalizedText(removeFpButton, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.removeFpButton.text")); // NOI18N
        removeFpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFpButtonActionPerformed(evt);
            }
        });
        jPanel2.add(removeFpButton);

        org.openide.awt.Mnemonics.setLocalizedText(editFpButton, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.editFpButton.text")); // NOI18N
        editFpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editFpButtonActionPerformed(evt);
            }
        });
        jPanel2.add(editFpButton);

        org.openide.awt.Mnemonics.setLocalizedText(jButton9, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jButton9.text")); // NOI18N
        jButton9.setToolTipText(org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jButton9.toolTipText")); // NOI18N
        jButton9.setEnabled(false);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton9);

        org.openide.awt.Mnemonics.setLocalizedText(loadFPButton, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.loadFPButton.text")); // NOI18N
        loadFPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFPButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(exportFpButton, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.exportFpButton.text")); // NOI18N
        exportFpButton.setEnabled(false);
        exportFpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportFpButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton8, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jButton8.text")); // NOI18N
        jButton8.setEnabled(false);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        fpThresholdSlider.setMajorTickSpacing(20);
        fpThresholdSlider.setMinorTickSpacing(5);
        fpThresholdSlider.setPaintLabels(true);
        fpThresholdSlider.setPaintTicks(true);
        fpThresholdSlider.setValue(30);
        fpThresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fpThresholdSliderStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(fpScaleCheckBox, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.fpScaleCheckBox.text")); // NOI18N
        fpScaleCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fpScaleCheckBoxStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel11, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel11.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel13.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel17, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel17.text")); // NOI18N

        trainingModelSelection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                trainingModelSelectionItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel18, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel18.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fpSizeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fpColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(loadFPButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(fpPointInfoCheckBox))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(exportFpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(fpScaleCheckBox)
                        .addGap(189, 189, 189))
                    .addComponent(fpThresholdSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(27, 27, 27))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trainingModelSelection, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(trainingModelSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadFPButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportFpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fpScaleCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fpThresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fpPointInfoCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(fpColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(fpSizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        Hashtable tresholdTable = new Hashtable();
        tresholdTable.put(new Integer(0), new JLabel("0"));
        tresholdTable.put(new Integer(20), new JLabel("0,2"));
        tresholdTable.put(new Integer(40), new JLabel("0,4"));
        tresholdTable.put(new Integer(60), new JLabel("0,6"));
        tresholdTable.put(new Integer(80), new JLabel("0,8"));
        tresholdTable.put(new Integer(100), new JLabel("1"));
        fpThresholdSlider.setLabelTable(tresholdTable);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(continueComparisonCheckBox, org.openide.util.NbBundle.getMessage(BatchRegistrationConfiguration.class, "BatchRegistrationConfiguration.continueComparisonCheckBox.text")); // NOI18N
        continueComparisonCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueComparisonCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jSeparator2)
                    .addComponent(continueComparisonCheckBox, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(registrationMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(0, 0, 0))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(registrationMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(continueComparisonCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(registerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1040, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private Boolean areFPCalculated(ProjectTopComponent comp) {
        int n = comp.getProject().getSelectedBatchComparison().getModels().size();
        if (n == 0) {
            return false;
        }

        for (int i = 0; i < n; i++) {
            List<FacialPoint> facialPoints = comp.getProject().getSelectedBatchComparison().getFacialPoints(
                    comp.getProject().getSelectedBatchComparison().getModel(i).getName());
            if (facialPoints == null || facialPoints.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    private Boolean areModelsLoaded(ProjectTopComponent tc) {
        if (tc.getProject().getSelectedBatchComparison().getModels().size() > 0) {
            return true;
        }
        return false;
    }

    private void registrationMethodComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrationMethodComboBoxActionPerformed
        RegistrationMethod regMeth = (RegistrationMethod) registrationMethodComboBox.getSelectedItem();
        
        if (regMeth == RegistrationMethod.PROCRUSTES) {
            jPanel1.setVisible(true);
            jPanel3.setVisible(false);
            registerButton.setEnabled(areFPCalculated(GUIController.getSelectedProjectTopComponent()));
            exportFpButton.setEnabled(areFPCalculated(GUIController.getSelectedProjectTopComponent()));
        } else if (regMeth == RegistrationMethod.HAUSDORFF) {
            jPanel1.setVisible(false);
            jPanel3.setVisible(true);
            registerButton.setEnabled(areModelsLoaded(GUIController.getSelectedProjectTopComponent()));
        } else {
            jPanel1.setVisible(false);
            jPanel3.setVisible(false);
            registerButton.setEnabled(areModelsLoaded(GUIController.getSelectedProjectTopComponent()));
        }
        
        getContext().setRegistrationMethod(regMeth);

    }//GEN-LAST:event_registrationMethodComboBoxActionPerformed

    private void fpPointInfoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpPointInfoCheckBoxActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().showInfo(fpPointInfoCheckBox.isSelected());
        getContext().setShowPointInfo(fpPointInfoCheckBox.isSelected());

    }//GEN-LAST:event_fpPointInfoCheckBoxActionPerformed

    private void fpColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fpColorPanelMouseClicked
        jColorChooser1.setColor(fpColorPanel.getBackground());
        colorDialog.setVisible(true);
        setColor();
    }//GEN-LAST:event_fpColorPanelMouseClicked

    private void fpSizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fpSizeSliderStateChanged
        setFacialPointRadius();
    }//GEN-LAST:event_fpSizeSliderStateChanged


    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (areModelsLoaded(GUIController.getSelectedProjectTopComponent())) {
            //calculatePoints();
            Runnable run = new Runnable() {

                @Override
                public void run() {
                    final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
                    BatchComparison c = getContext();
                    
                    FpResultsBatch res = FpProcessing.instance().calculatePointsBatch(cancelTask,
                            c.getModels(), dialog.getPointsArray());
                    
                    for(String key : res.getFps().keySet()){
                        List<FacialPoint> originalFps = new ArrayList<>();
                        for(FacialPoint fp : res.getFps().get(key))
                            originalFps.add(fp.deepCopyFp());
                        
                        c.addOriginalFp(key, originalFps);
                    }                    

                    //move to GUI manipulation eventually
                    c.setFacialPoints((HashMap<String, List<FacialPoint>>) res.getFps());
                    tc.getViewerPanel_Batch().getListener().setFacialPoints(
                             c.getFacialPoints(
                                    tc.getViewerPanel_Batch().getListener().getModel().getName()
                            ));

                    registerButton.setEnabled(areFPCalculated(tc));
                    exportFpButton.setEnabled(areFPCalculated(tc));
                }
            };
            runningTask = new Thread(run);
            runningTask.start();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void removeFpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFpButtonActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().setRemovePoints(removeFpButton.isSelected());
        
        addFpButton.setSelected(false);
        editFpButton.setSelected(false);
    }//GEN-LAST:event_removeFpButtonActionPerformed

    private void addFpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFpButtonActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().setAddPoints(addFpButton.isSelected());
        
        removeFpButton.setSelected(false);
        editFpButton.setSelected(false);
    }//GEN-LAST:event_addFpButtonActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        colorDialog.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        colorDialog.setVisible(false);
        fpColorPanel.setBackground(jColorChooser1.getColor());
    }//GEN-LAST:event_jButton5ActionPerformed

    private void editFpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editFpButtonActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().setEditablePoints(editFpButton.isSelected());
        
        addFpButton.setSelected(false);
        removeFpButton.setSelected(false);
    }//GEN-LAST:event_editFpButtonActionPerformed

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        final BatchComparison c = getContext();
        registerButton.setEnabled(false);
        c.setRegisterButtonEnabled(false);
        
        
        Runnable run = new Runnable() {

            @Override
            public void run() {
                ProgressHandle p = ProgressHandleFactory.createHandle("Registrating faces...");
                

                try {
                    if (c.getRegistrationMethod() == RegistrationMethod.HAUSDORFF) {
                        p.start();

                        Icp.instance().setP(null);
                        SurfaceComparisonProcessing.setP(p);

                        List<File> models = c.getModels();
                        c.setTransSize(models.size());

                        int selectedModelTemplate = c.getTemplateIndex();

                        switch (selectedModelTemplate) {
                            case 0:
                                Random r = new Random();
                                selectedModelTemplate = r.nextInt(models.size());
                                break;
                            case 1:
                                //most avg
                                selectedModelTemplate = SurfaceComparisonProcessing.instance().findMostAvgFace(models);
                                break;
                            case 2:
                                //least avg
                                selectedModelTemplate = SurfaceComparisonProcessing.instance().findLeastAvgFace(models);
                                break;
                            default:
                                //some specific model was used
                                selectedModelTemplate -= 3; //there are 3 options at the beginning that are not models
                                break;
                        }

                        Model template = ModelLoader.instance().loadModel(models.get(selectedModelTemplate), Boolean.FALSE, true);
                        c.setTemplateIndex(selectedModelTemplate);
                        
                        if(c.isUseSymmetry()){
                            SurfaceComparisonProcessing.instance().createSymetricModelNoCopy(template);
                            models = SurfaceComparisonProcessing.instance().createSymModelAndSave(models);
                        }

                        tc.getViewerPanel_Batch().getListener().setModels(template);
                        List<File> results = models;

                        try {
                            Methods m = Methods.values()[c.getMethod()];
                            Type t = SurfaceComparisonProcessing.instance().getSelectedType(m, buttonGroup2);
                            float value = getUndersampleValue(m, t);
                            ICPmetric metric = c.getIcpMetric();

                            results = SurfaceComparisonProcessing.instance().processManyToMany(template, models, c.getICPnumberOfHeads(), c.getICPmaxIteration(), 
                                    c.getScaleEnabled(), c.getICPerrorRate(),
                                    m, t, value, metric, tc.getProject().getSelectedBatchComparison());

                            
                            c.setRegistrationResults(results);
                            c.setAverageFace(template);
                            c.setModelsAdded(true);     //new avg face has to be computed since it's being overriden 
                       } catch (FileManipulationException ex) {
                            //osefuj vynimku
                            registerButton.setEnabled(true);
                        }

                    } else if (c.getRegistrationMethod() == RegistrationMethod.PROCRUSTES) {
                        int size = c.getModels().size();
                        p.start(size);
            
                        List<List<FacialPoint>> fpMatrix = new ArrayList();
                        List<ArrayList<Vector3f>> verts = new ArrayList();      //TODO look into memory usage

                        for (int i = 0; i < size; i++) {
                            List<FacialPoint> facialPoints = c.getFacialPoints(
                                    c.getModels().get(i).getName());
                            fpMatrix.add(facialPoints);
                            
                            Model m = ModelLoader.instance().loadModel(c.getModel(i), Boolean.FALSE, Boolean.TRUE);

                            verts.add(m.getVerts());
                        }

                        ProcrustesBatchProcessing procrustes = new ProcrustesBatchProcessing(fpMatrix, verts, c.isFpScaling());

                        //procrustes.doBatchProcessing(jSlider3.getValue() / 100f);
                        List<List<ICPTransformation>> trans = procrustes.alignBatch(c.getFpTreshold() / 100f);
                        
                        
                        if(trans == null){
                            int res = JOptionPane.showConfirmDialog(tc, "There wasn't enough corresponding landmarks in one or more of the models to register models. Do you wish to continue?", "Not enough landmarks", JOptionPane.YES_NO_OPTION);
                            if(res == JOptionPane.NO_OPTION){
                               registerButton.setEnabled(true);
                               return; 
                            }else if(res == JOptionPane.YES_OPTION){
                                noRegistration(); //if user wish to continue don't ask them to continue again
                                finalizeRegistration(p);
                                return;
                            }
                        }
                    
                    c.setTrans(trans);
                        
                        tc.getProject().getSelectedBatchComparison().setTrans(trans);
                        
                        tc.getProject().getSelectedBatchComparison().clearFacialPoints();

                        List<File> results = new ArrayList<>(size);
                        File tmpModuleFile = new File("" + System.currentTimeMillis());

                        FileUtils.instance().createTMPmoduleFolder(tmpModuleFile);

                        for (int i = 0; i < size; i++) {
                            c.addFacialPoints(c.getModel(i).getName(),
                                    procrustes.getGpa().getPA(i).getFacialPoints());
                            
                            Model m = ModelLoader.instance().loadModel(c.getModel(i), false, Boolean.TRUE);
                            m.setVerts(procrustes.getGpa().getPA(i).getVertices());
                            procrustes.getGpa().getPA(i).updateFacialPoints(c.getFacialPoints(m.getName()));                            
                            
                            //Update canvas with registered model
                            if (m.getName().equals(tc.getViewerPanel_Batch().getListener().getModel().getName())) {
                                tc.getViewerPanel_Batch().getListener().setModels(m);
                                tc.getViewerPanel_Batch().getListener().setFacialPoints(c.getFacialPoints(tc.getViewerPanel_Batch().getListener().getModel().getName()));
                            }
                            
                            ProgressHandle k = ProgressHandleFactory.createHandle("saving registered files.");

                            k.start();

                            results.add(ProcessingFileUtils.instance().saveModelToTMP(m, tmpModuleFile, i, -3, Boolean.TRUE));
                            k.finish();     
                        }

                        c.setRegistrationResults(results);
                       
                        
                    }else{
                        noRegistration();
                    }

                    finalizeRegistration(p);
                } catch (Exception ex) {
                    Exceptions.printStackTrace(ex);
                    registerButton.setEnabled(true);
                }finally{
                    p.finish();
                }
            }

            private void finalizeRegistration(ProgressHandle p) {
                //pre istotu
                registerButton.setEnabled(true);
                c.setRegisterButtonEnabled(true);
                
                //set up default comparison configuration data
                BatchGUIsetup.setUpDefaultComparisonConfigurationData(c);
                
                if (GUIController.getSelectedProjectTopComponent() == tc) {
                    GUIController.getConfigurationTopComponent().addBatchComparisonComponent();
                }
                
                c.setState(2);
                
                if (c.isContinueComparison()) {
                    GUIController.getConfigurationTopComponent().getBatchComparisonConfiguration().computeComparison(tc);
                }
                
                p.finish();
                GUIController.updateNavigator();
            }

            private void noRegistration() {
                c.setRegistrationResults(c.getModels());
            }
        };

        Thread t = new Thread(run);
        t.start();


    }//GEN-LAST:event_registerButtonActionPerformed

    private int getUndersampleValue(Methods m, Type t) {       
        
        if (m == Methods.Curvature || m == Methods.Random) {
            switch (t) {
                case PERCENTAGE:
                    return (int) percentageSpinner.getValue();
                case NUMBER:
                    return (int) numberSpinner.getValue();
                default:
                    return -1;
            }
        } else if (m == Methods.Disc) {
            return radiusSlider.getValue();
        }

        return -1;
    }

    private void loadFPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFPButtonActionPerformed

        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        BatchComparison c = getContext();
        List<FpModel> loaded = FPImportExport.instance().importPoints(tc, true);

        if (loaded == null || loaded.isEmpty()) {
            //nothing loaded
            return;
        }

        c.clearFacialPoints();

        List<File> models = new ArrayList<>();

        models.addAll(c.getModels());
        FPImportExport.instance().alignPointsToModels(loaded, models);

        for (FpModel model : loaded) {
            if (tc.getViewerPanel_Batch().getListener().getModel().getName().equals(model.getModelName())) {
                tc.getViewerPanel_Batch().getListener().setFacialPoints(model.getFacialPoints());
            }
            
            List<FacialPoint> originalFp = model.createListFp();
            c.addOriginalFp(model.getModelName(), originalFp);

            c.addFacialPoints(
                    model.getModelName(), model.getFacialPoints());
        }

        registerButton.setEnabled(areFPCalculated(tc));
        exportFpButton.setEnabled(areFPCalculated(tc));
    }//GEN-LAST:event_loadFPButtonActionPerformed

    public Boolean validate(ImportPanel p) {
        String path = p.getFileName();
        if (!new File(path).exists()) {
            return false;
        }
        return true;
    }

    public Boolean validate(ExportPanel p) {
        String path = p.getFolderName();
        if (p.getSelectedModelName().equals("All models") && new File(path).exists()) {
            return true;
        }
        if (!new File(path).exists() || p.getFileName().isEmpty()) {
            return false;
        }
        return true;
    }


    private void exportFpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportFpButtonActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        FPImportExport.instance().exportBatch(tc, getContext());

    }//GEN-LAST:event_exportFpButtonActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void icpAvgMeshesSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_icpAvgMeshesSpinnerStateChanged
        getContext().setICPnumberOfHeads((int) icpAvgMeshesSpinner.getValue());
    }//GEN-LAST:event_icpAvgMeshesSpinnerStateChanged

    private void icpErrorSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_icpErrorSpinnerStateChanged
        getContext().setICPerrorRate((float) icpErrorSpinner.getValue());
    }//GEN-LAST:event_icpErrorSpinnerStateChanged

    private void icpMaxIterationSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_icpMaxIterationSpinnerStateChanged
        getContext().setICPmaxIteration((int) icpMaxIterationSpinner.getValue());
    }//GEN-LAST:event_icpMaxIterationSpinnerStateChanged

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if (jComboBox1.getSelectedIndex() == 2) {
            jPanel4.setVisible(true);
        } else {
            jPanel4.setVisible(false);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void icpScaleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_icpScaleCheckBoxActionPerformed
        getContext().setScaleEnabled(icpScaleCheckBox.isSelected());
    }//GEN-LAST:event_icpScaleCheckBoxActionPerformed

    private void fpThresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fpThresholdSliderStateChanged
        getContext().setFpTreshold(fpThresholdSlider.getValue());
    }//GEN-LAST:event_fpThresholdSliderStateChanged

    private void fpScaleCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fpScaleCheckBoxStateChanged
        getContext().setFpScaling(fpScaleCheckBox.isSelected());
    }//GEN-LAST:event_fpScaleCheckBoxStateChanged

    private void percentageSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_percentageSpinnerStateChanged
        getContext().setValue(Float.parseFloat(percentageSpinner.getValue().toString()));
    }//GEN-LAST:event_percentageSpinnerStateChanged

    private void numberSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numberSpinnerStateChanged
        if(numberSpinner.getValue() != null)
            getContext().setValue(Float.parseFloat(numberSpinner.getValue().toString()));
    }//GEN-LAST:event_numberSpinnerStateChanged

    private void undersamplingComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undersamplingComboBoxActionPerformed
        switch ((Methods) undersamplingComboBox.getSelectedItem()) {
            case Random: //Random
                randomPanel.setVisible(true);
                discPanel.setVisible(false);
                break;
            case Disc:
                randomPanel.setVisible(false);
                discPanel.setVisible(true);
                break;
            case None:
                randomPanel.setVisible(false);
                discPanel.setVisible(false);
                break;
        }
        
        getContext().setMethod(undersamplingComboBox.getSelectedIndex());
    }//GEN-LAST:event_undersamplingComboBoxActionPerformed

    private void percentageRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentageRadioButtonActionPerformed
        percentageSpinner.setEnabled(true);
        numberSpinner.setEnabled(false);
        getContext().setType(0);
    }//GEN-LAST:event_percentageRadioButtonActionPerformed

    private void numberRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberRadioButtonActionPerformed
        percentageSpinner.setEnabled(false);
        numberSpinner.setEnabled(true);
        getContext().setType(1);
    }//GEN-LAST:event_numberRadioButtonActionPerformed

    private void facesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facesComboBoxActionPerformed
        getContext().setTemplateIndex(facesComboBox.getSelectedIndex());
    }//GEN-LAST:event_facesComboBoxActionPerformed

    private void icpMetricComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_icpMetricComboBoxActionPerformed
        getContext().setIcpMetric((ICPmetric) icpMetricComboBox.getSelectedItem());
    }//GEN-LAST:event_icpMetricComboBoxActionPerformed

    private void symModelsCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_symModelsCheckboxActionPerformed
        getContext().setUseSymmetry(symModelsCheckbox.isSelected());
    }//GEN-LAST:event_symModelsCheckboxActionPerformed

    private void continueComparisonCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueComparisonCheckBoxActionPerformed
       getContext().setContinueComparison(continueComparisonCheckBox.isSelected());
    }//GEN-LAST:event_continueComparisonCheckBoxActionPerformed

    private void trainingModelSelectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_trainingModelSelectionItemStateChanged
        try {
            LandmarkLocalization.setTrainingModel(trainingModelSelection.getSelectedItem().toString());
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_trainingModelSelectionItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFrame frame = new JFrame();
        frame.add(dialog);
        frame.setSize(dialog.getPreferredSize());
        frame.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed
    private void setColor() {
        GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().getListener().setColorOfPoint(fpColorPanel.getBackground().getRGBColorComponents(new float[3]));
        getContext().setPointColor(fpColorPanel.getBackground());
    }

    private void setFacialPointRadius() {
        GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().getListener().setFacialPointRadius(fpSizeSlider.getValue() / 10.0f);
        getContext().setFpSize(fpSizeSlider.getValue());
    }

    public void setConfiguration() {
        BatchComparison c = GUIController.getSelectedProjectTopComponent().getProject().getSelectedBatchComparison();
        
        //set up data when project is first created
        if (c.isFirstCreated()) {
            //to check whether FPs can be exported once they are added, removed
            ObservableMaster o = new ObservableMaster();
            ExportFPButtonObserver export = new ExportFPButtonObserver(exportFpButton,
                    c.getFacialPoints());
            RegisterFPButtonObserver register = new RegisterFPButtonObserver(registerButton, c.getFacialPoints());
            o.addObserver(export);
            o.addObserver(register);

            GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().setFpExportEnable(o);

            BatchGUIsetup.setUpDefaultRegistrationData(c);  //this method will set firstCreated to false
            populateFacesComboBox();
        }
            
        
        registrationMethodComboBox.setSelectedItem(c.getRegistrationMethod());
        
        //FP
        fpScaleCheckBox.setSelected(c.isFpScaling());
        fpThresholdSlider.setValue(c.getFpTreshold());
        fpPointInfoCheckBox.setSelected(c.isShowPointInfo());
        fpColorPanel.setBackground(c.getPointColor());
        fpSizeSlider.setValue(c.getFpSize());
        
        //ICP
        icpMetricComboBox.setSelectedItem(c.getIcpMetric());
        icpScaleCheckBox.setSelected(c.getScaleEnabled());
        symModelsCheckbox.setSelected(c.isUseSymmetry());
        icpErrorSpinner.setValue(c.getICPerrorRate());
        icpMaxIterationSpinner.setValue(c.getICPmaxIteration());
        icpAvgMeshesSpinner.setValue(c.getICPnumberOfHeads());        
        
        numberSpinner.setValue(c.getValue());
        percentageSpinner.setValue(c.getValue());
        radiusSlider.setValue((int)c.getValue());
        
        if(c.getMethod() == Methods.Curvature.ordinal() ||
           c.getMethod() == Methods.Random.ordinal()){
           if(c.getType() == Type.NUMBER.ordinal()){
               percentageSpinner.setValue(50);
               percentageSpinner.setEnabled(false);
               numberRadioButton.setSelected(true);
               numberSpinner.setEnabled(true);
           }else{
               numberSpinner.setValue(0);
               percentageRadioButton.setSelected(true);
               percentageSpinner.setEnabled(true);
               numberSpinner.setEnabled(false);
           }
       }else if(c.getMethod() == Methods.Disc.ordinal()){
           percentageSpinner.setValue(50);
           numberSpinner.setValue(0);
           numberSpinner.setEnabled(false);
       }else{
           percentageSpinner.setValue(50);
           numberSpinner.setValue(50);
           radiusSlider.setValue(50);
       }
        
        undersamplingComboBoxActionPerformed(null);
     
        if ((registrationMethodComboBox.getSelectedIndex() == 0 && !areFPCalculated(GUIController.getSelectedProjectTopComponent())) || (!areModelsLoaded(GUIController.getSelectedProjectTopComponent()))) {
            registerButton.setEnabled(false);
            exportFpButton.setEnabled(false);
        } else {
            registerButton.setEnabled(true);
            exportFpButton.setEnabled(true);
        }
        
        
        GUIController.getSelectedProjectTopComponent().getViewerPanel_Batch().getFpExportEnable().updateObservers();
        facesComboBox.setSelectedIndex(c.getTemplateIndex());
        continueComparisonCheckBox.setSelected(c.isContinueComparison());

    }
    
    private BatchComparison getContext(){
        return GUIController.getSelectedProjectTopComponent().getProject().getSelectedBatchComparison();
    }

    //adds items to combo box for choosing the template for avg face.
    //Random, Most Avg, Least Avg are first then all the faces loaded
    public void populateFacesComboBox() {
        facesComboBox.removeAllItems();

        facesComboBox.addItem("Random");
        facesComboBox.addItem("Most Average");
        facesComboBox.addItem("Least Average");

        List<File> models = getContext().getModels();
        for (File model : models) {
            facesComboBox.addItem(model.getName());
        }

    }

    public void updateRegisterButtonEnabled() {
        BatchComparison c = getContext();
        
        if ((c.getRegistrationMethod() == RegistrationMethod.PROCRUSTES && !areFPCalculated(GUIController.getSelectedProjectTopComponent())) || (!areModelsLoaded(GUIController.getSelectedProjectTopComponent()))) {
            registerButton.setEnabled(false);
            exportFpButton.setEnabled(false);
        } else {
            registerButton.setEnabled(true);
            exportFpButton.setEnabled(true);
        }
    }
    
    private void setNamesForComboBox(){
        try {
            File folder = new File((new java.io.File(".").getCanonicalPath() + separatorChar + "models" + separatorChar + "resources" + separatorChar + "trainingModels"));
            File[] listOfFiles = folder.listFiles();
            String[] namesOfFiles = new String[listOfFiles.length];
            
            for (int i = 0; i < listOfFiles.length; i++) {
                
                namesOfFiles[i] = listOfFiles[i].getName();
            
            }
            
            trainingModelSelection.setModel(new javax.swing.DefaultComboBoxModel(namesOfFiles));
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton addFpButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JDialog colorDialog;
    private javax.swing.JCheckBox continueComparisonCheckBox;
    private javax.swing.JPanel discPanel;
    private javax.swing.JToggleButton editFpButton;
    private javax.swing.JButton exportFpButton;
    private javax.swing.JComboBox facesComboBox;
    private javax.swing.JPanel fpColorPanel;
    private javax.swing.JCheckBox fpPointInfoCheckBox;
    private javax.swing.JCheckBox fpScaleCheckBox;
    private javax.swing.JSlider fpSizeSlider;
    private javax.swing.JSlider fpThresholdSlider;
    private javax.swing.JSpinner icpAvgMeshesSpinner;
    private javax.swing.JSpinner icpErrorSpinner;
    private javax.swing.JSpinner icpMaxIterationSpinner;
    private javax.swing.JComboBox<cz.fidentis.comparison.ICPmetric> icpMetricComboBox;
    private javax.swing.JLabel icpMetricLabel;
    private javax.swing.JCheckBox icpScaleCheckBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton loadFPButton;
    private javax.swing.JRadioButton numberRadioButton;
    private javax.swing.JSpinner numberSpinner;
    private javax.swing.JRadioButton percentageRadioButton;
    private javax.swing.JSpinner percentageSpinner;
    private javax.swing.JSlider radiusSlider;
    private javax.swing.JPanel randomPanel;
    private javax.swing.JButton registerButton;
    private javax.swing.JComboBox registrationMethodComboBox;
    private javax.swing.JToggleButton removeFpButton;
    private javax.swing.JCheckBox symModelsCheckbox;
    private javax.swing.JComboBox<String> trainingModelSelection;
    private javax.swing.JComboBox<cz.fidentis.undersampling.Methods> undersamplingComboBox;
    // End of variables declaration//GEN-END:variables
}
